<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbonejs | Adrian Mejia's Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/backbonejs/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2014-10-03T19:36:09-04:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating RESTful APIs With NodeJS and MongoDB Tutorial (Part II)]]></title>
    <link href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/"/>
    <updated>2014-10-01T17:26:42-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb</id>
    <content type="html"><![CDATA[<p>Welcome to this RESTful API using Node.js (Express.js) and MongoDB (mongoose) tutorial. You can follow alone to make a stand alone API endpoint, or you could also check out our <a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb" target="_blank">AngularJS</a> or <a href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started" target="_blank">BackboneJS</a> tutorials to build the front-end that connects with this backend.</p>

<p>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" ></p>

<p><strong>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></strong></p>

<p><img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<p>Part III - <a href="/blog/2014-10-03-mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs">MEAN Stack: Wiring all together</a></p>

<p><img src="/images/MEAN_jarroba.png" title="MEAN Stack" ></p>

<h1>Part II: Creating RESTful APIs with NodeJS and MongoDB Tutorial by Examples</h1>

<h2>What RESTful API really means?</h2>

<p>REST stands for Representational State Transfer. It is an architecture that allows <code>client-server</code> communication through a uniform interface. They are also <code>stateless</code>, <code>cachable</code> and has property called <code>idempotence</code>, which means that the side effect of multiple identical requests have the same effect as the same single request.</p>

<p>HTTP RESTful API&rsquo;s are compose of:</p>

<ul>
<li>Base URI, e.g. <code>http://adrianmejia.com</code></li>
<li>Media type, e.g. html, JSON, XML, Microformats, Atom, Images&hellip;</li>
<li>HTTP methods, e.g. GET, PUT, DELETE, PATCH, POST, &hellip;</li>
</ul>


<p>Here&rsquo;s is a summary what we want to implement:</p>

<table>
<thead>
<tr>
<th> Resource (URI)  </th>
<th>  POST (create) </th>
<th> GET (read)  </th>
<th> PUT (update)  </th>
<th> DELETE (destroy)  </th>
</tr>
</thead>
<tbody>
<tr>
<td> /todos  </td>
<td> create new task  </td>
<td> list tasks  </td>
<td> N/A (update all)  </td>
<td>  N/A (destroy all) </td>
</tr>
<tr>
<td> /todos/1  </td>
<td>  error  </td>
<td> show task ID 1  </td>
<td> update task ID 1  </td>
<td>  destroy task ID 1 </td>
</tr>
</tbody>
</table>


<p><strong>NOTE</strong>: Format will be JSON.</p>

<p><strong>NOTE1</strong>: Bulk updates and bulk destroys are not safe, so we will not be implementing those.</p>

<p><strong>NOTE2</strong>: POST, GET, PUT, DELETE == <strong>C</strong>REATE, <strong>R</strong>EAD, <strong>U</strong>PDATE, <strong>D</strong>ELETE == <strong>CRUD</strong>.</p>

<h1>Setup</h1>

<p>The two main components of the MEAN stack are&hellip; NodeJS and MongoDB.</p>

<p><img src="/images/node-js-mongodb.png" title="NodeJS and MongoDB" ></p>

<p>Note: If already have installed NodeJS, MongoDB (Mongoose), ExpressJS and knows about them separately then you can jump to <a href="#wiring-up-the-mean-stack">wiring the stack</a>, which is where the hands on start. Otherwise, if you want to review/learn about each member of the stack then follow alone and enjoy the ride!</p>

<h2>NodeJS</h2>

<p>For short NodeJS is Javascript running outside the browser, in this case in the server.</p>

<p>To install it, you can go to <a href="http://nodejs.org/" target="_blank">NodeJS Website</a>. But if you are using Mac and <a href="http://brew.sh" target="_blank">brew</a> you can do <code>brew install nodejs</code> and in ubuntu use <a href="https://github.com/creationix/nvm">nvm</a> to install it. Once you have continue.</p>

<p>Check node version and npm (node package manager) version:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node -v&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; v0.10.30&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;npm -v&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 2.0.0-alpha-5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">## ExpressJS</span>
</span><span class='line'>
</span><span class='line'>ExpressJS is web application framework that runs on NodeJS. Allows you to build web applications and APIs endpoints. <span class="o">(</span>mode details later<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>Install it using npm:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;npm install -g express
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice <code>-g</code>. It will install <code>express</code> globally and add it the <code>PATH</code>, so you can run it from anywhere.</p>

<p>Check version:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>express -V&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 4.9.0&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">## MongoDB</span>
</span><span class='line'>
</span><span class='line'>MongoDB is a document-oriented NoSQL database <span class="o">(</span>Big Data ready<span class="o">)</span>. It stores data in JSON-like format and allows to perform SQL-like queries against it.
</span><span class='line'>
</span><span class='line'>You can installed following the <span class="p">&amp;</span>lt<span class="p">;</span>a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://docs.mongodb.org/manual/installation/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="p">&amp;</span>gt<span class="p">;</span>instructions here<span class="p">&amp;</span>lt<span class="p">;</span>/a<span class="p">&amp;</span>gt<span class="p">;</span>. If you have a Mac and <span class="p">&amp;</span>lt<span class="p">;</span>a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://brew.sh/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="p">&amp;</span>gt<span class="p">;</span>brew<span class="p">&amp;</span>lt<span class="p">;</span>/a<span class="p">&amp;</span>gt<span class="p">;</span> it<span class="err">&#39;</span>s just: <span class="sb">`</span>brew install mongodb <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> mongod<span class="sb">`</span>. In ubuntu <span class="sb">`</span>sudo apt-get -y install mongodb<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'>Check version:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Mac&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mongod <span class="p">&amp;</span>ndash<span class="p">;</span>version&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; db version v2.6.4&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 2014-10-01T19:07:26.649-0400 git version: nogitversion&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Ubuntu&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mongod <span class="p">&amp;</span>ndash<span class="p">;</span>version&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; db version v2.0.4, pdfile version 4.5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Wed Oct  <span class="m">1</span> 23:06:54 git version: nogitversion&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c"># Understanding the MEAN Stack</span>
</span><span class='line'>
</span><span class='line'>If follow the previous steps you should have all you need to <span class="nb">complete </span>this tutorial. Basically, we are going to build an API that allow users to CRUD <span class="o">(</span>Create-Read-Update-Delete<span class="o">)</span> Todo tasks from database.
</span><span class='line'>
</span><span class='line'><span class="c">## Mongoose CRUD</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CRUD</span> <span class="o">=</span> **C**reate-**R**ead-**U**pdate-**D**elete
</span><span class='line'>
</span><span class='line'>We can play with Mongoose in the console. In the <span class="sb">`</span>todoApp<span class="sb">`</span> <span class="nb">type</span> <span class="sb">`</span>node<span class="sb">`</span> to enter in the node CLI. Then:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">mongoose</span> <span class="o">=</span> require<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>mongoose<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ mongoose.connect<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>mongodb://localhost/test3<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">TodoSchema</span> <span class="o">=</span> new mongoose.Schema<span class="o">({</span>
</span><span class='line'>  name: String,
</span><span class='line'>  completed: Boolean,
</span><span class='line'>  note: String,
</span><span class='line'>  updated_at: <span class="o">{</span> <span class="nb">type</span>: Date, default: Date.now <span class="o">}</span>,
</span><span class='line'><span class="o">})</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">Todo</span> <span class="o">=</span> mongoose.model<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Todo<span class="p">&amp;</span>rsquo<span class="p">;</span>, TodoSchema<span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">### Mongoose Create</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">todo</span> <span class="o">=</span> new Todo<span class="o">({</span>name: <span class="p">&amp;</span>lsquo<span class="p">;</span>Master NodeJS<span class="p">&amp;</span>rsquo<span class="p">;</span>, completed: <span class="nb">false</span>, note: <span class="p">&amp;</span>lsquo<span class="p">;</span>Getting there<span class="p">&amp;</span>hellip<span class="p">;&amp;</span>rsquo<span class="p">;</span><span class="o">})</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ todo.save<span class="o">(</span><span class="k">function</span><span class="o">(</span>err<span class="o">){</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>        console.log<span class="o">(</span>err<span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        console.log<span class="o">(</span>todo<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also build the object and save in one step using <code>create</code>:</p>

<pre><code class="javascript">/* prompt&gt; */ Todo.create({name: 'Master Javscript', completed: true, note: 'Getting better everyday'}, function(err, todo){
    if(err) console.log(err);
    else console.log(todo);
});
</code></pre>

<h3>Mongoose Read and Query</h3>

<p>There are multiple options for reading/querying data:</p>

<ul>
<li>Model.find(conditions, [fields], [options], [callback])</li>
<li>Model.findById(id, [fields], [options], [callback])</li>
<li>Model.findOne(conditions, [fields], [options], [callback])</li>
</ul>


<p>Some examples:</p>

<pre><code class="javascript Find all">/* prompt&gt; */ Todo.find(function (err, todos) {
  if (err) return console.error(err);
  console.log(todos)
});
</code></pre>

<p>You can also add queries</p>

<pre><code class="javascript Find with queries">/* prompt&gt; */ var callback = function (err, data) {
  if (err) return console.error(err);
  else console.log(data);
}

// Get all completed tasks
/* prompt&gt; */ Todo.find({completed: true }, callback);

// Get all tasks ending with `JS`
/* prompt&gt; */ Todo.find({name: /JS$/ }, callback);
</code></pre>

<p>You can chain multiple queries, e.g.:</p>

<pre><code class="javascript Chaining queries">/* prompt&gt; */ var oneYearAgo = new Date();
oneYearAgo.setYear(oneYearAgo.getFullYear() - 1);

// Get all tasks staring with `Master`, completed
/* prompt&gt; */ Todo.find({name: /^Master/, completed: true }, callback);

// Get all tasks staring with `Master`, not completed and created from year ago to now...
/* prompt&gt; */ Todo.find({name: /^Master/, completed: false }).where('updated_at').gt(oneYearAgo).exec(callback);
</code></pre>

<h3>Mongoose Update</h3>

<p>Each model has an <code>update</code> method which accepts multiple updates (for batch updates because doesn’t return an array with data). Alternatively, the method <code>findOneAndUpdate</code> could be used to update just one and return an object.</p>

<ul>
<li>Model.update(conditions, update, [options], [callback])</li>
<li>Model.findByIdAndUpdate(id, [update], [options], [callback])</li>
<li>Model.findOneAndUpdate([conditions], [update], [options], [callback])</li>
</ul>


<pre><code class="javascript Todo.update and Todo.findOneAndUpdate">
// Model.update(conditions, update, [options], [callback])
// update `multi`ple tasks from complete false to true

/* prompt&gt; */ Todo.update({ completed: false }, { completed: true }, { multi: true }, function (err, numberAffected, raw) {
  if (err) return handleError(err);
  console.log('The number of updated documents was %d', numberAffected);
  console.log('The raw response from Mongo was ', raw);
});

//Model.findOneAndUpdate([conditions], [update], [options], [callback])
/* prompt&gt; */ Todo.findOneAndUpdate({name: /JS$/ }, {completed: false}, callback);
</code></pre>

<h3>Mongoose Delete</h3>

<p><code>update</code> and <code>remove</code> mongoose API are identical, the only difference it is that no elements are returned.</p>

<ul>
<li>Model.remove(conditions, [callback])</li>
<li>Model.findByIdAndRemove(id, [options], [callback])</li>
<li>Model.findOneAndRemove(conditions, [options], [callback])</li>
</ul>


<h2>ExpressJS and Middlewares</h2>

<p>ExpressJS is a complete web framework solution. It has HTML template solutions (jade, ejs, handlebars, hogan.js) and CSS precompilers (less, stylus, compass). Through middlewares layers, it handles: cookies, sessions, caching, CSRF, compression and many more.</p>

<p><strong>Middlewares</strong> are a stack of processors that runs on each request made to the server. You can have any number of middlewares that will process the request one by one in a serial fashion. Some might alter the request input, log outputs, add data and pass it to the <code>next()</code> middleware in the chain.</p>

<p>Middlewares are added to ExpressJS stack using <code>app.use</code> for any method or the app.VERB (e.g., <code>app.get</code>, <code>app.delete</code>, <code>app.post</code>, <code>app.update</code>, &hellip;)</p>

<p><img src="/images/express-middlewares.png" title="ExpressJS Middlewares" ></p>

<p>Let&rsquo;s say you want to log the IP of the client on each request:</p>

<pre><code class="javascript Log the client IP on every request">app.use(function (req, res, next) {
  var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  console.log('Client IP:', ip);
  next();
});
</code></pre>

<p>You can also specify a path that you want the middleware to activate on.</p>

<pre><code class="javascript Middleware mounted on "/todos/:id" and log the request method">app.use('/todos/:id', function (req, res, next) {
  console.log('Request Type:', req.method);
  next();
});
</code></pre>

<p>And finally you can use <code>app.get</code> to catch GET request with maching route, reply the request with a <code>response.send</code> and end the middleware chain. Let&rsquo;s use what we learned on <a href="#mongoose-read-and-query">mongoose read</a> to reply with a user data matching the <code>id</code>.</p>

<pre><code class="javascript Middleware mounted on "/todos/:id" and returns ">app.get('/todos/:id', function (req, res, next) {
  Todo.findById(req.params.id, function(err, todo){
    if(err) res.send(err);
    res.json(todo);
  });
});
</code></pre>

<p>Notice that all previous middlewares called <code>next()</code> except this last one, because it sends a respond (in JSON) to the client with the requeste <code>todo</code> data.</p>

<p>Hopefully, you don&rsquo;t have to develop a bunch of middlewares besides routes, since ExpressJS has a bunch of middlewares available.</p>

<h3>Default Express 4.0 middlewares</h3>

<ul>
<li><p><a href="https://github.com/expressjs/morgan" target="_blank">morgan</a>: logger</p></li>
<li><p><a href="https://github.com/expressjs/body-parser" target="_blank">body-parser</a>: parse the body so you can access parameters in requests in <code>req.body</code>. e.g. <code>req.body.name</code>.</p></li>
<li><p><a href="https://github.com/expressjs/cookie-parser" target="_blank">cookie-parser</a>: parse the cookies so you can access parameters in cookies <code>req.cookies</code>. e.g. <code>req.cookies.name</code>.</p></li>
<li><p><a href="https://github.com/expressjs/serve-favicon" target="_blank">serve-favicon</a>: exactly that, serve favicon from route <code>/favicon.ico</code>. Should be call on the top before any other routing/middleware takes place to avoids unnecessary parsing.</p></li>
</ul>


<h3>Other ExpressJS Middlewares</h3>

<p>The following middlewares are not added by default, but It&rsquo;s nice to know they exist at least:</p>

<ul>
<li><p><a href="https://github.com/expressjs/compression" target="_blank">compression</a>: compress all request. e.g. <code>app.use(compression())</code></p></li>
<li><p><a href="https://github.com/expressjs/session" target="_blank">session</a>: create sessions. e.g. <code>app.use(session({secret: 'b@ndw1d7h'}))</code></p></li>
<li><p><a href="https://github.com/expressjs/method-override" target="_blank">method-override</a>: <code>app.use(methodOverride('_method'))</code> Override methods to the one specified on the <code>_method</code> param. e.g. <code>GET /resource/1?_method=DELETE</code> will become <code>DELETE /resource/1</code>.</p></li>
<li><p><a href="https://github.com/expressjs/response-time" target="_blank">response-time</a>: <code>app.use(responseTime())</code> adds <code>X-Response-Time</code> header to responses.</p></li>
<li><p><a href="https://github.com/expressjs/errorhandler" target="_blank">errorhandler</a>: Aid development, by sending full error stack traces to the client when an error occurs. <code>app.use(errorhandler())</code>. It is good practice to surround it with an if statement to check <code>process.env.NODE_ENV === 'development'</code>.</p></li>
<li><p><a href="https://github.com/expressjs/vhost" target="_blank">vhost</a>: Allows you to use different stack of middlewares depending on the request <code>hostname</code>. e.g. <code>app.use(vhost('*.user.local', userapp))</code> and <code>app.use(vhost('assets-*.example.com', staticapp))</code> where <code>userapp</code> and <code>staticapp</code> are different express instances with different middlewares.</p></li>
<li><p><a href="https://github.com/expressjs/csurf" target="_blank">csurf</a>: Adds a <strong>C</strong>ross-<strong>s</strong>ite <strong>r</strong>equest <strong>f</strong>orgery (CSRF) protection by adding a token to responds either via <code>session</code> or <code>cookie-parser</code> middleware. <code>app.use(csrf());</code></p></li>
<li><p><a href="https://github.com/expressjs/timeout" target="_blank">timeout</a>: halt execution if it takes more that a given time. e.g. <code>app.use(timeout('5s'));</code>. However you need to check by yourself under every request with a middleware that checks <code>if (!req.timedout) next();</code>.</p></li>
</ul>


<h2>API clients (Browser, Postman and curl)</h2>

<p>I know you have not created any route yet. However, in the next sections you will. These are just three ways to retrieve, change and delete data from your future API.</p>

<h3>Curl</h3>

<pre><code class="bash Create tasks"># Create task
curl -XPOST http://localhost:3000/todos -d 'name=Master%20Routes&amp;completed=false&amp;note=soon...'

# List tasks
curl -XGET http://localhost:3000/todos
</code></pre>

<h3>Browser and Postman</h3>

<p>If you open your browser and type <code>localhost:3000/todos</code> you will see all the tasks (when you implement it). However, you cannot do post commands by default. For further testing let’s use a Chrome plugin called <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en" target="_blank">Postman</a>. It allows you to use all the HTTP VERBS easily and check <code>x-www-form-urlencoded</code> for adding parameters.</p>

<p><img src="/images/postman_post.png" title="Postman POST example" ></p>

<h3>Websites and Mobile Apps</h3>

<p>Probably this is the main consumers of the APIs. You can interact with RESTful APIs using jQuery&rsquo;s <code>$ajax</code> and its wrappers, BackboneJS&rsquo;s Collections/models, AngularJS&rsquo;s <code>$http</code> or <code>$resource</code>, among many other libraries/frameworks and mobile clients.</p>

<p>In the end, we are going to explain how to use AngularJS to interact with this API.</p>

<p><img src="/images/api_consumers.png" title="API Consumers" >
<small class="muted">Image from CodeSchool</small></p>

<h1>Wiring up the MEAN Stack</h1>

<h2>Bootstrapping ExpressJS</h2>

<p>After a detour in Node CLI, MongoDB, Mongoose, tools and middlewares land we are back to our express todoApp. This time to create the routes and finalize our RESTful API.</p>

<p>Create the app typing <code>express -e todoApp</code>, install dependencies <code>cd todoApp &amp;&amp; npm install</code> and run the app <code>DEBUG=todoApp ./bin/www</code>:</p>

<pre><code class="bash">express -e todoApp

# =&gt;   create : todoApp                  # app directory  
# =&gt;   create : todoApp/package.json     # file containing all the dependencies
# =&gt;   create : todoApp/app.js           # Entry point of the application: defines middleware, initialize database connections, routes and more.
# =&gt;   create : todoApp/public           # all files contained here are accessible through to public (browser or API calls).
# =&gt;   create : todoApp/public/javascripts
# =&gt;   create : todoApp/public/images
# =&gt;   create : todoApp/public/stylesheets
# =&gt;   create : todoApp/public/stylesheets/style.css
# =&gt;   create : todoApp/routes           # containes all the routes files
# =&gt;   create : todoApp/routes/index.js
# =&gt;   create : todoApp/routes/users.js
# =&gt;   create : todoApp/views            # contains all the HTML templates
# =&gt;   create : todoApp/views/index.ejs
# =&gt;   create : todoApp/views/error.ejs
# =&gt;   create : todoApp/bin              # contains executable files
# =&gt;   create : todoApp/bin/www          # bootstrap the app: loads app.js, and set the port for the webserver.
# =&gt;
# =&gt;   install dependencies:
# =&gt;     $ cd todoApp &amp;&amp; npm install
# =&gt;
# =&gt;   run the app:
# =&gt;     $ DEBUG=todoApp ./bin/www
</code></pre>

<h2>Connect ExpressJS to MongoDB</h2>

<p>Hopefully, you have installed MongoDB in the <a href="#mongodb">setup section</a>, and you can start it typing:</p>

<pre><code class="bash">mongod
</code></pre>

<p>Install the MongoDB driver for NodeJS called mongoose:</p>

<pre><code class="bash">npm install mongoose --save
</code></pre>

<p>Notice <code>--save</code>. It will add it to the <code>todoApp/package.json</code></p>

<p>Next, you need to require mongoose in the <code>todoApp/app.js</code></p>

<pre><code class="javascript">var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/todoApp', function(err) {
    if(err) {
        console.log('connection error', err);
    } else {
        console.log('connection successful');
    }
});
</code></pre>

<p>Now, When you run <code>npm start</code> or <code>./bin/www</code>, you will notice the message <code>connection successful</code>. Did you? Great!</p>

<h2>Creating the Todo model with Mongoose</h2>

<p>It is show time! All the above was setup and preparation for this moment. Let bring the API to life.</p>

<p>Create a <code>models</code> directory and a <code>Todo.js</code> model:</p>

<pre><code class="bash">mkdir models
touch models/Todo.js
</code></pre>

<p>In the <code>models/Todo.js</code>:</p>

<pre><code class="javascript">var mongoose = require('mongoose');

var TodoSchema = new mongoose.Schema({
  name: String,
  completed: Boolean,
  note: String,
  updated_at: { type: Date, default: Date.now },
});

mongoose.model('Todo', TodoSchema);
</code></pre>

<p>What’s going up there? Isn’t MongoDB suppose to be schemaless? Well, it is schemaless and very flexible indeed. However, very often we want bring sanity to our API/WebApp through validations and enforcing a schema to keep a consistent structure. Mongoose does that for us, which is nice.</p>

<p>You can use the following types:</p>

<ul>
<li>String</li>
<li>Boolean</li>
<li>Date</li>
<li>Array</li>
<li>Number</li>
<li>ObjectId</li>
<li>Mixed</li>
<li>Buffer</li>
</ul>


<h2>ExpressJS Routes</h2>

<p>To sum up we want to achieve the following:</p>

<table>
<thead>
<tr>
<th> Resource (URI)  </th>
<th>  POST (create) </th>
<th> GET (read)  </th>
<th> PUT (update)  </th>
<th> DELETE (destroy)  </th>
</tr>
</thead>
<tbody>
<tr>
<td> /todos  </td>
<td> create new task  </td>
<td> list tasks  </td>
<td> error  </td>
<td>  error </td>
</tr>
<tr>
<td> /todos/:id  </td>
<td>  error  </td>
<td> show task :id  </td>
<td> update task :id  </td>
<td>  destroy task ID 1 </td>
</tr>
</tbody>
</table>


<p>Let&rsquo;s setup the routes</p>

<p><code>bash Create a new route called `todos.js` in the `routes` folder or rename `users.js`
mv routes/users.js routes/todos.js
</code></p>

<p>In <code>app.js</code> add new <code>todos</code> route or just replace <code>./routes/users</code> for <code>./routes/todos</code></p>

<pre><code class="javascript Adding todos routes">var todos = require('./routes/todos');
app.use('/todos', todos);
</code></pre>

<p>All set! Now, let&rsquo;s go back and edit our <code>routes/todos.js</code>.</p>

<h3>List: GET /todos</h3>

<p>Remember <a href="#mongoose-read-and-query"> mongoose query api</a>? Here&rsquo;s how to use it in this context:</p>

<pre><code class="javascript routes/todos.js">var express = require('express');
var router = express.Router();

var mongoose = require('mongoose');
var Todo = require('../models/Todo.js');

/* GET /todos listing. */
router.get('/', function(req, res, next) {
  Todo.find(function (err, todos) {
    if (err) return next(err);
    res.json(todos);
  });
});

module.exports = router;
</code></pre>

<p>Harvest time! We don&rsquo;t have any task in database but at least we verify it is working:</p>

<pre><code class="bash Testing all together"># Start database
mongod

# Start Webserver (in other terminal tab)
DEBUG=todoApp ./bin/www

# Test API (in other terminal tab)
curl localhost:3000/todos
# =&gt; []% 
</code></pre>

<p>If it returns an empty array <code>[]</code> you are all set. If you get errors, try going back and making sure you didn&rsquo;t forget anything or write a comment at the end of the post for help.</p>

<h3>Create: POST /todos</h3>

<p>Back in <code>routes/todos.js</code>, we are going to add the ability to create using <a href="#mongoose-create">mongoose create</a>. Could you make it work before looking at the next example?</p>

<pre><code class="javascript routes/todos.js (showing just create route)">
/* POST /todos */
router.post('/', function(req, res, next) {
  Todo.create(req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Few things:</p>

<ul>
<li>We are using the <code>router.post</code> instead of <code>router.get</code>.</li>
<li>You have to stop and run the server again: <code>DEBUG=todoApp ./bin/www</code>. From now on, use <code>nodemon</code> to refresh automatically. <code>npm install nodemon</code> and then run <code>nodemon</code>.</li>
</ul>


<h3>Show: GET /todos/:id</h3>

<p>This is a snap with <a href="#mongoose-read-and-query"><code>Todo.findById</code></a> and <code>req.params</code>. Notice that <code>params</code> matches the placeholder name we set while defining the route. <code>:id</code> in this case.</p>

<pre><code class="javascript routes/todos.js (showing just show route)">/* GET /todos/id */
router.get('/:id', function(req, res, next) {
  Todo.findById(req.params.id, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Test it in <em>POST</em>MAN using an <code>_id</code> from you created elements. E.g. <code>localhost:3000/todos/542d7d290a705126360ac635</code>.</p>

<h3>Update: PUT /todos/:id</h3>

<p>Back in <code>routes/todos.js</code>, we are going to update tasks. This one you can do it before looking at the example bellow, review <a href="#mongoose-update">findByIdAndUpdate</a> and give it a try!</p>

<pre><code class="javascript routes/todos.js (showing just update route)">/* PUT /todos/:id */
router.put('/:id', function(req, res, next) {
  Todo.findByIdAndUpdate(req.params.id, req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Test it in <em>POST</em>MAN :)</p>

<h3>Destroy: DELETE /todos/:id</h3>

<p>Finally, the last one! Almost identical to <code>update</code>, use <a href="#mongoose-delete"><code>findByIdAndRemove</code></a>.</p>

<pre><code class="javascript routes/todos.js (showing just update route)">/* DELETE /todos/:id */
router.delete('/:id', function(req, res, next) {
  Todo.findByIdAndRemove(req.params.id, req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Is it working? Cool, you are done then!</p>

<h1>Hooking up NodeJS API with AngularJS</h1>

<p>As a prerrequisite you need to have finished our tutorial in the <a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/" target="_blank">previous post</a>.</p>

<p>The next post is going to cover this topic.</p>

<h1>What&rsquo;s next?</h1>

<p>Available tutorials:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/" target="_blank">AngularJS tutorial for beginners with NodeJS ExpressJS and MongoDB</a></li>
<li><a href="http://adrianmejia.com/blog/categories/backbonejs" target="_blank">BackboneJS Tutorials</a></li>
</ul>


<p>Future posts about:</p>

<ul>
<li>Testing AngularJS</li>
<li>Testing NodeJS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 4: Routers)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/"/>
    <updated>2012-09-13T14:41:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4</id>
    <content type="html"><![CDATA[<h1>BackboneJS IV</h1>

<p>The part 3 of this tutorial is <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">here</a>.</p>

<h2>2.6 Backbone.Router</h2>

<p>You could build web application without using the routers.  However, if you want to make reference to certain ‘state’ or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.</p>

<p>Routing in most of JS application are achieved by hash-tags. E.g. If you take a look of Gmail URL you will see something like:</p>

<p><code>https://mail.google.com/mail/u/0/#inbox/139c0d48e11d986b</code></p>

<p>where the <code>#inbox/139c0d48e11d986b</code> is the hash-tag which reference some email location.</p>

<p>In backbone, routes are hash maps that match URL patterns to functions. You can use parameter parts, such as <code>todos/:id</code>, or using splats <code>file/*path</code> you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.</p>

<h3>2.6.1 Initializing the Router</h3>

<p>In our Todo app, we are going to use routers to filter between the tasks that are pending and the ones that have been completed. So, let&rsquo;s initialize the routes this way:</p>

<p><figure class='code'><figcaption><span>Define Router <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;*filter&#39;</span> <span class="o">:</span> <span class="s1">&#39;setFilter&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">setFilter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;app.router.params = &#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">);</span> <span class="c1">// just for didactical purposes.</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">filter</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, you need to initialize it, adding this lines:</p>

<p><figure class='code'><figcaption><span>Initialize router <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; //--------------
</span><span class='line'> // Initializers
</span><span class='line'> //--------------
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt; app.router = new app.Router();&lt;/li&gt;
</span><span class='line'>&lt;li&gt; Backbone.history.start();
</span><span class='line'> app.appView = new app.AppView();&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>You can test that you router is working just typing <code>#anything/that/you/want</code> and seeing the parameter in you browser&rsquo;s console.</p>

<h3>2.6.1 Processing the routes</h3>

<p>Before rendering the list of items, you need to check the parameters to wether show only the pending ones, or the completed or show them all. As shown in the code snipet below.</p>

<p><figure class='code'><figcaption><span>Processing the routes in app.AppView <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -164,7 +177,18 @@
</span><span class='line'>       },
</span><span class='line'>       addAll: function(){
</span><span class='line'>         this.$(&amp;lsquo;#todo-list&amp;rsquo;).html(&amp;lsquo;&amp;rsquo;); // clean the todo list
</span><span class='line'><span class="gd">-        app.todoList.each(this.addOne, this);</span>
</span><span class='line'><span class="gi">+        // filter todo item list</span>
</span><span class='line'><span class="gi">+        switch(window.filter){</span>
</span><span class='line'><span class="gi">+          case &amp;lsquo;pending&amp;rsquo;:</span>
</span><span class='line'><span class="gi">+            &lt;em&gt;.each(app.todoList.remaining(), this.addOne);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+          case &amp;lsquo;completed&amp;rsquo;:</span>
</span><span class='line'><span class="gi">+            &lt;/em&gt;.each(app.todoList.completed(), this.addOne);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+          default:</span>
</span><span class='line'><span class="gi">+            app.todoList.each(this.addOne, this);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+        }</span>
</span><span class='line'>       },
</span><span class='line'>       newAttributes: function(){
</span><span class='line'>         return {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>If you try adding the words <code>#/pending</code> or <code>#/completed</code> at the end of the URL you&rsquo;ll get an error!. That&rsquo;s a good sign, it means the routes are working, but we haven&rsquo;t implemented the <code>app.todoList.remaining()</code> and <code>app.todoList.completed()</code>. So, that&rsquo;s next:</p>

<p><figure class='code'><figcaption><span>Defining &lsquo;completed&rsquo; and &lsquo;remaining&rsquo; functions in app.TodoList <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -85,7 +90,15 @@
</span><span class='line'>     //&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
</span><span class='line'>     app.TodoList = Backbone.Collection.extend({
</span><span class='line'>       model: app.Todo,
</span><span class='line'><span class="gd">-      localStorage: new Store(&amp;ldquo;backbone-todo&amp;rdquo;)</span>
</span><span class='line'><span class="gi">+      localStorage: new Store(&amp;ldquo;backbone-todo&amp;rdquo;),</span>
</span><span class='line'><span class="gi">+      completed: function() {</span>
</span><span class='line'><span class="gi">+        return this.filter(function( todo ) {</span>
</span><span class='line'><span class="gi">+          return todo.get(&amp;lsquo;completed&amp;rsquo;);</span>
</span><span class='line'><span class="gi">+        });</span>
</span><span class='line'><span class="gi">+      },</span>
</span><span class='line'><span class="gi">+      remaining: function() {</span>
</span><span class='line'><span class="gi">+        return this.without.apply( this, this.completed() );</span>
</span><span class='line'><span class="gi">+      }</span>
</span><span class='line'>     });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, if you try again adding the hash-tags it will work! But, it will be better if the user can have links to that instead of typing URLs. So, let&rsquo;s add them.</p>

<p><figure class='code'><figcaption><span>Show routes&#8217; links <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -32,6 +32,11 @@
</span><span class='line'>     &lt;header id=&quot;header&quot;&gt;
</span><span class='line'>       &lt;h1&gt;Todos&lt;/h1&gt;
</span><span class='line'>       &lt;input id=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus&gt;
</span><span class='line'><span class="gi">+      &lt;div&gt;</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/&quot;&gt;show all&lt;/a&gt; |</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/pending&quot;&gt;show pending&lt;/a&gt; |</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/completed&quot;&gt;show completed&lt;/a&gt;</span>
</span><span class='line'><span class="gi">+      &lt;/div&gt;</span>
</span><span class='line'>     &lt;/header&gt;
</span><span class='line'>     &lt;section id=&quot;main&quot;&gt;
</span><span class='line'>       &lt;ul id=&quot;todo-list&quot;&gt;&lt;/ul&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Well, that&rsquo;s all! If completed these 4 parts tutorial you will be familiar with the main Backbone modules (Models, Collections, Views, Events, and Routes). To increase you knowledge you can follow the following resources:</p>

<ul>
<li><a href="https://github.com/documentcloud/backbone/blob/master/backbone.js">Backbone&rsquo;s Source code - it&rsquo;s the ultimate source of true</a></li>
<li><a href="http://backbonejs.org/?utm_source=adrianmejia.com">Official documentation</a></li>
</ul>


<h1>What&rsquo;s next?</h1>

<p>Write a server API in NodeJS to apply the learned here:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/" target="_blank">Creating a RESTful API with NodeJS and MongoDB</a></li>
</ul>


<p>Now, do a Todo app in AngularJS:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/" target="_blank">AngularJS tutorial for beginners with NodeJS ExpressJS and MongoDB</a></li>
</ul>


<p>Hope it was helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 3: CRUD)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/"/>
    <updated>2012-09-13T01:37:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3</id>
    <content type="html"><![CDATA[<h1>BackboneJS III</h1>

<p>The part 2 of this tutorial is <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">here</a>.</p>

<h2>2.5 Todo item list CRUD</h2>

<p>There are a couple of features that we could improve. Let’s implement the CRUD (Create-Read-Update-Delete) for the item list.</p>

<h3>2.5.1. C-reate</h3>

<p>We are already can create item list from the console (2.3) and also from the UI (2.4.3). So, it’s done.</p>

<h3>2.5.2. U-pdate</h3>

<p>What if you make a mistake and want to change the text on some of your to-do list. Furthermore, you can notice that the checkboxes states are not persistent when you reload the pages. Let’s fix both problems.</p>

<p>1.- You want to respond to a double click event showing up a text box, where the user can change the text. First, let’s add the HTML in the <code>item-template</code> template below the label tag.</p>

<p><code>&lt;input class="edit" value="&lt;%- title %&gt;"&gt;</code></p>

<p>2.- If you refresh, you will notice that there are both displaying at the same time. So, you can hide them properly with the following CSS.
<figure class='code'><figcaption><span>CSS <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">pre</span><span class="o">&gt;&lt;</span><span class="nt">code</span><span class="o">&gt;</span><span class="nf">#todo-list</span> <span class="nt">input</span><span class="nc">.edit</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="c">/* Hides input box*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#todo-list</span> <span class="nc">.editing</span> <span class="nt">label</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="c">/* Hides label text when .editing*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#todo-list</span> <span class="nc">.editing</span> <span class="nt">input</span><span class="nc">.edit</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span> <span class="c">/* Shows input text box when .editing*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">code</span><span class="o">&gt;&lt;/</span><span class="nt">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>3.- Then, we need to add the events to the TodoView class to respond to the changes.</p>

<p><figure class='code'><figcaption><span>Todo Model <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders individual todo items list (li)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#item-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// enable chained calls</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;dblclick label&#39;</span> <span class="o">:</span> <span class="s1">&#39;edit&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;keypress .edit&#39;</span> <span class="o">:</span> <span class="s1">&#39;updateOnEnter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;blur .edit&#39;</span> <span class="o">:</span> <span class="s1">&#39;close&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">edit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;editing&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;editing&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">updateOnEnter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">13</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can find the <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/3840dc802d6f311528298639150a5f52364c1975">diff</a> that were added to implement the update feature.</p>

<p><a href="https://github.com/amejiarosario/Backbone-tutorial/commit/19fa69e654ae5d370385675e4ffed615532b9934">Here</a> are the changes to fix the update for the checkboxes.</p>

<h3>2.5.2. D-elete</h3>

<p>To be able to remove to-do items, we need to add a remove button in each item and listen to the click event on it, which will trigger the destroy function in the selected todo object.</p>

<p>1.- Add the HTML markup for the remove button.</p>

<p><figure class='code'><figcaption><span>Remove Button into &lsquo;item template&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -47,6 +47,7 @@
</span><span class='line'>       &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; &lt;%= completed ? &#39;checked&#39; : &#39;&#39; %&gt;&gt;
</span><span class='line'>       &lt;label&gt;&amp;lt;%- title %&gt;&lt;/label&gt;
</span><span class='line'>       &lt;input class=&quot;edit&quot; value=&quot;&lt;%- title %&gt;&amp;ldquo;&gt;
</span><span class='line'><span class="gi">+      &lt;button class=&quot;destroy&quot;&gt;remove&lt;/button&gt;</span>
</span><span class='line'>     &lt;/div&gt;
</span><span class='line'>   &lt;/script&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>2.- Listen for the click event in the button that you just created.</p>

<p><figure class='code'><figcaption><span>Add event listeners for the Remove Button in &lsquo;app.TodoView&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -105,12 +106,14 @@
</span><span class='line'>       },
</span><span class='line'>       initialize: function(){
</span><span class='line'>         this.model.on(&amp;lsquo;change&amp;rsquo;, this.render, this);
</span><span class='line'><span class="gi">+        this.model.on(&amp;lsquo;destroy&amp;rsquo;, this.remove, this); // remove: Convenience Backbone&#39;</span>
</span><span class='line'>       },
</span><span class='line'>       events: {
</span><span class='line'>         &amp;lsquo;dblclick label&amp;rsquo; : &amp;lsquo;edit&amp;rsquo;,
</span><span class='line'>         &amp;lsquo;keypress .edit&amp;rsquo; : &amp;lsquo;updateOnEnter&amp;rsquo;,
</span><span class='line'>         &amp;lsquo;blur .edit&amp;rsquo; : &amp;lsquo;close&amp;rsquo;,
</span><span class='line'><span class="gd">-        &amp;lsquo;click .toggle&amp;rsquo;: &amp;lsquo;toggleCompleted&amp;rsquo;</span>
</span><span class='line'><span class="gi">+        &amp;lsquo;click .toggle&amp;rsquo;: &amp;lsquo;toggleCompleted&amp;rsquo;,</span>
</span><span class='line'><span class="gi">+        &amp;lsquo;click .destroy&amp;rsquo;: &amp;lsquo;destroy&amp;rsquo;</span>
</span><span class='line'>       },
</span><span class='line'>       edit: function(){
</span><span class='line'>         this.$el.addClass(&amp;lsquo;editing&amp;rsquo;);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>3.- Add the destroy method to the TodoView.</p>

<p><figure class='code'><figcaption><span>Add the destroy method to &lsquo;app.TodoView&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -130,7 +133,10 @@
</span><span class='line'>       },
</span><span class='line'>       toggleCompleted: function(){
</span><span class='line'>         this.model.toggle();
</span><span class='line'><span class="gd">-      }</span>
</span><span class='line'><span class="gi">+      },</span>
</span><span class='line'><span class="gi">+      destroy: function(){</span>
</span><span class='line'><span class="gi">+        this.model.destroy();</span>
</span><span class='line'><span class="gi">+      }</span>
</span><span class='line'>     });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>You can download the full working code so far in <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">here</a> and you can visualize the changes needed to implement the delete feature in <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/1267e531ae3ef508eb32e5308c2cc965f02d1b45">here</a></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">4th part</a> and learn about Backbone&rsquo;s Routes!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 2: Models, Collections and Views)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/"/>
    <updated>2012-09-13T00:08:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2</id>
    <content type="html"><![CDATA[<h1>BackboneJS II</h1>

<p>The part 1 of this tutorial is <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">here</a></p>

<h2>2. Todo App in Backbone</h2>

<p>After completing this example app, you will have experience and basic understanding of all the modules of Backbone!</p>

<p>(Updated: 2013-02-02, 2013-11-24)
Notice: This tutorial was written using Backbone v.0.9.x, now version 1.1.x or later are out. However, all the principles exaplained here applies for both.</p>

<h3>2.1.- Todo app Boiler plate</h3>

<p>Let&rsquo;s start again with the initial <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html">HTML file</a> used on 1.1. Now, instead of div#container let&rsquo;s add the following HTML code:</p>

<p><figure class='code'><figcaption><span>HTML Structure <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;todoapp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;new-todo&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;What needs to be done?&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;todo-list&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We are going to implement a To-do list, which is basically un-ordered list (ul) of elements with checkboxes.</p>

<h3>2.2.- Backbone.Model</h3>

<p>Models are the heart of every application. It contains the interactive data and the logic surrounding it, such as data validation, getters and setters, default values, data initialization, conversions and so on.
For our example, we are going to create a model called <code>Todo</code>, which will store a string of text (title) and whether the task has been completed or not.</p>

<p><figure class='code'><figcaption><span>Todo Model <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// create namespace for our app</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice, that for convention classes names are capitalize, while instance variables and objects are not. Another important aspect of models it’s that their properties are dynamic; they can be created on the fly and doesn’t have any specific type associated.</p>

<p><strong>Test what you just coded!</strong></p>

<p>After you completed the code snippet above you can open your browser console (chrome&rsquo;s console: ctrl+shift+i -or- ⌘+alt+i) and try this out, to get familiar with the models:</p>

<p><figure class='code'><figcaption><span>Practice in your Browser\&rsquo;s console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span> <span class="c1">// create object with the attributes specified.</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">title</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// &amp;ldquo;Learn Backbone.js&amp;rdquo;</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">completed</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// undefined</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// &amp;ldquo;Wed Sep 12 2012 12:51:17 GMT-0400 (EDT)&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2.3.- Backbone.Collection</h3>

<p>As its name indicates, collections are ordered sets of models, where you can get and set models in the collection, listen for events when any element in the collection changes, and fetching for model’s data from the server.</p>

<p>E.g.: <code>todoList.fetch();</code></p>

<p>Collections allows to save data (in database, file, memory), and it requires a reference to it. Therefore, you need to specify the <code>url</code> parameter with a relative url, where the model’s resource would be located on the server. Otherwise, you will get errors like:</p>

<p><code>A "url" property or function must be specified</code></p>

<p>We are not going to use a backend server for simplicity (I will do a new post for that); instead we are going to use HTML5’s local storage for persistence through a Backbone’s plugin. So, we need to define the localStorage property instead of URL. You need to include the backbone-localstorage.js with the rest of your libs as <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">shown in the full code</a>:</p>

<p><code>&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js" type="text/javascript"&gt;</code></p>

<p><figure class='code'><figcaption><span>Todo list Collection <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">localStorage</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Store</span><span class="p">(</span><span class="s2">&quot;backbone-todo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instance of the Collection</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>Test what you just your coded!</strong></p>

<p>(Google&rsquo;s Chrome console shortcuts: ctrl+shift+i -or- ⌘+alt+i)</p>

<p><figure class='code'><figcaption><span>Practice in your Browser\&rsquo;s console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">todoList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span><span class="p">()</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Backbone</span><span class="err">\</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">s</span> <span class="nx">Collection</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;});</span> <span class="c1">// notice: that &lt;code&gt;completed&lt;/code&gt; will be set to false by default.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lmodel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Models</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">lmodel</span><span class="p">);</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">title</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>     <span class="c1">// [&amp;ldquo;Learn Backbone&amp;rsquo;s Collection&amp;rdquo;, &amp;ldquo;Learn Models&amp;rdquo;]</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">completed</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// [false, true]</span>
</span><span class='line'><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todoList</span><span class="p">);</span>    <span class="c1">// &amp;ldquo;[{&quot;title&amp;rdquo;:&amp;ldquo;Learn Backbone&amp;rsquo;s Collection&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:false,&amp;ldquo;id&amp;rdquo;:&amp;ldquo;d9763e99-2267-75f5-62c3-9d7e40742aa6&amp;rdquo;},{&amp;ldquo;title&amp;rdquo;:&amp;ldquo;Learn Models&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:true}]&amp;ldquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>2.4.- Backbone.View</h2>

<p>As mentioned in <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>, Views doesn’t have the HTML markups for our application, but instead (It&rsquo;s like the controller in MVC frameworks) process data and link it to templates and it finally render HTML based on events or data changes.</p>

<h3>2.4.1.- Basic Properties</h3>

<p>There are 4 basic properties in a view: el, initialize, render, and events.</p>

<p>We have already seen the first 3 and will see later the fourth one. Do you remember the Hello World View from <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>?</p>

<p><figure class='code'><figcaption><span>Example of a Backbone.View </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="c1">// el - stands for element. Every view has a element associate in with HTML</span>
</span><span class='line'>      <span class="c1">//      content will be rendered.</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>      <span class="c1">// It&amp;rsquo;s the first function called when this view it&amp;rsquo;s instantiated.</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">// $el - it&amp;rsquo;s a cached jQuery object (el), in which you can use jQuery functions</span>
</span><span class='line'>      <span class="c1">//       to push content. Like the Hello World in this case.</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2.4.1.1.- <code>view.el</code></h3>

<p>Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the <code>el</code> property. <code>this.el</code> is created from view’s <code>el</code>,<code>tagName</code>, <code>className</code>, <code>id</code> or <code>attributes</code> properties. If none of these are specified, then this.el is an empty <code>div</code>. The <code>view.$el</code> it’s a cached jQuery object of the view’s element (view.el).</p>

<h3>2.4.1.2.- Initialize/construtor</h3>

<p>Here you have the option to pass parameters that will be attached to a model, collection or view.el.</p>

<h3>2.4.1.3.- <code>render</code></h3>

<p>This function injects the markup into the elements. Not all views require having a render function, as you are going to see in the sample code, they can call other view’s render functions.</p>

<h3>2.4.1.5.- delegated events</h3>

<p>Events are written in the following format:</p>

<p><code>{"&lt;EVENT_TYPE&gt; &lt;ELEMENT_ID&gt;": "&lt;CALLBACK_FUNTION&gt;"}</code></p>

<p>E.g.</p>

<p><code>events: {'keypress #new-todo': 'createTodoOnEnter'}</code></p>

<p>in jQuery it would be something like:</p>

<p><code>$('#new-todo').keypress(createTodoOnEnter);</code></p>

<h2>2.4.2.- Todo View</h2>

<p>Now back to our To-do application: We need a view that renders each of the todo model objects into the page. The <code>item-template</code> and <code>app.TodoView</code> will render each todo item.</p>

<p><figure class='code'><figcaption><span>item-template <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>  <span class="ni">&amp;lt;</span>script type=&quot;text/template&quot; id=&quot;item-template&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div class=&quot;view&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>input class=&quot;toggle&quot; type=&quot;checkbox&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>label<span class="ni">&amp;gt;&amp;lt;</span>%- title %<span class="ni">&amp;gt;&amp;lt;</span>/label<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In the following block of code we have the Backbone.View which uses the above template (<code>#item-template</code>) to fill it out the title from the <code>model</code> we pass along.</p>

<p><figure class='code'><figcaption><span>Todo View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders individual todo items list (li)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#item-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// enable chained calls</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When we instanciate the views, they can receive any parameter that we need. In our case we call it <code>model</code> so we need to instanciated with a model (e.g. todo):</p>

<p><code>var view = new app.TodoView({model: todo});</code></p>

<p>Also notice that it&rsquo;s using a <code>tagName: li</code> instead of the just <code>el</code> from before. This mean that the new render elements will be wrapped around a <code>&lt;li&gt;&lt;/li&gt;</code></p>

<h2>2.5.- Backbone.Events</h2>

<p>This module can be mixed with any object and give it the pub/sub (observer patter) behaviour. Events provides a couple of methods from which we are going to discuss: <code>on</code>, <code>off</code> and <code>trigger</code>. (If this you are familiar with then in jQuery, they will work the same way + some nice built-in features)</p>

<h3>2.5.1 on</h3>

<p><code>object.on(event, callback, [context])</code></p>

<p>Also called bind. It binds an object to an event and a callback. When that event it&rsquo;s triggered it executes the callback.</p>

<p>E.g.
<code>todoList.on('add', this.addAll, this);</code></p>

<p>Everytime a new item is <code>add</code>ed to a Backbone.Collection the event <code>add</code> is triggered. In the example above, after the event is triggered the todoList&rsquo;s callback <code>addAll()</code> is executed and the current object is passed with <code>this</code> as a <code>context</code>.</p>

<p>Events can also be set on arbitrary objects using underscore.js <code>extend</code> function:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Triggered</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span> <span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Events</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">object</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my_event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">callback</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">object</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my_event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my</span> <span class="nx">custom</span> <span class="nx">event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>App View</h2>

<p>Now, we need another view that take a collection and render each of the individual items. We are going to call it ‘AppView’. Take a look through this code and try to identify each of the elements (we have already describe them in the previous sections).</p>

<p><figure class='code'><figcaption><span>Todo View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders the full list of todo items calling TodoView for each one.</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#todoapp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#new-todo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// when new elements are added to the collection render then with addOne</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addOne</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addAll</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span> <span class="c1">// Loads list from local storage</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;keypress #new-todo&#39;</span><span class="o">:</span> <span class="s1">&#39;createTodoOnEnter&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">createTodoOnEnter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">!==</span> <span class="mi">13</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">// ENTER_KEY = 13</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">newAttributes</span><span class="p">());</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// clean input box</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">addOne</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todo</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">todo</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#todo-list&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">addAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#todo-list&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// clean the todo list</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">addOne</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">newAttributes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------</span>
</span><span class='line'><span class="c1">// Initializers</span>
</span><span class='line'><span class="c1">//--------------   </span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">appView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">AppView</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">3rd part</a> and learn how to make CRUD for your models!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 1: Intro)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/"/>
    <updated>2012-09-11T22:50:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started</id>
    <content type="html"><![CDATA[<p>Backbone.js is a JavaScript framework, among many others, that is gaining special attention in the web development community because it&rsquo;s ease of use and the structure that it provides to JavaScript applications.</p>

<p><img src="/images/backbonejs.png"></p>

<p>(Updated: 2013-02-02, 2013-11-24)</p>

<h1>Brief Background</h1>

<p><a href="#start">TL; DR</a>: You need to use JavaScript heavily in order to make responsive and interactive web applications. <a href="#start">Jump to this and get started.</a></p>

<p>The web application development process has been evolving over the years. In the beginning web applications were just static HTML pages, which required programmers to change the code (HTML, CSS, JS) in order to change the content. Later, in web 2.0, server side programming languages (like PHP, Ruby, Java, …) were added to generate HTML pages dynamically based on user input and data stored in database. That was a huge improvement, and most of the pages served today use this approach. However, to provide the web site with even more responsiveness, speed, and enhanced user interaction, it requires bringing the logic closer to the client (browser).  There are a couple of languages that can run in the browsers besides JS, such as Java, Flash and others. However, these require extra plugins and are not as ubiquitous as JavaScript.</p>

<p>Web applications nowadays require heavy use of JavaScript to generate content on the fly. The user needn&rsquo;t wait between requests and page refreshes. A lot of the logic/code that used to be on the server side is being moved to the client side. JS allows web sites to render only content that changes without needing to reload the full-page on every request. Examples of this kind of web applicqtion are Gmail, Pandora, Pinterest, Nokia Maps 3D and others.</p>

<p>A common problem with large JS web application developed is that they can become pretty messy really quickly. The lack of structure makes the code hard to maintain. This is where Backbone comes into play. It provides structure to organize the code and increase maintainability. Backbone is not the only framework like this; in fact, there are many JS frameworks that attempt to offer similar benefits, like Ember.js, Angular.js and so on. However, I choose Backbone because it&rsquo;s one of the most widely used frameworks in its category. It has a vibrant community and it’s also being fully used in production for a considerable number of big companies like: Wal-Mart mobile, Groupon, Khan Academy, Pandora, Wordpress, Foursquare, and so on.</p>

<p><a id="start"></a></p>

<h1>BackboneJS</h1>

<h2>Just enough to get started with Backbone.js</h2>

<p>Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It’s made up of the following modules:</p>

<ul>
<li> Views</li>
<li> Events</li>
<li> Models</li>
<li> Collections</li>
<li> Routers</li>
</ul>


<h2>Shut up and show me the code!</h2>

<p>Alright! the way we are going to explore all of these modules is through examples. This is a practical tutorial that I wished I had it when I stared learning. This is a fat-free walkthrough of Backbone.js, as simple as possible, with all the code in one file for didactical purposes (no hidden magic tricks, all cards are on the table).</p>

<p>The first example is a ‘Hello World’ app in Backbone and the second is a &lsquo;to do&rsquo; app. After working through these two example apps, you’ll see every Backbone module and have a practical understanding about them.</p>

<h2>1. Hello World in Backbone.js</h2>

<p>You can follow along with this tutorial&rsquo;s code in this <a href="https://github.com/amejiarosario/Backbone-tutorial/commits/">repository</a>. Each feature implemented is a new commit, so you can easily see what changed in every step.</p>

<p><strong>1.1.- Simple HTML5 and Backbone boilerplate</strong></p>

<p>To get started, download <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html">this simple html file</a>. This file  contains the libraries that you&rsquo;ll need (jQuery, Underscore.js, Backbone.js and Backbone-localStorage.js) and the placeholders for your HTML and JS code. Don&rsquo;t worry about the libraries, we are going to explain them as we need them.</p>

<p>After downloading the aformentioned file, notice the HTML where your entire page will be built using Backbone.Views!</p>

<p>Your entire js app will be loaded here:</p>

<p><code>&lt;div id="container"&gt;Loading...&lt;/div&gt;</code></p>

<p><a id="1.2"></a>
<strong>1.2.- Backbone&rsquo;s Views</strong></p>

<p>Backbone&rsquo;s Views are the equivalent of ‘controllers’ on MVC frameworks (like Ruby on Rails), if you are not familiar with MVC frameworks, that&rsquo;s okay. Backbone&rsquo;s Views glue together user events (clicks, pressed keys, etc.), render HTML views and templates, and interact with models which contains the data of the application.</p>

<p>Here is an example of a Backbone.view: READ THE CODE AND COMMENTS, then insert this code in the javascript block of the HTML file you downloaded.</p>

<p><figure class='code'><figcaption><span>Simple Backbone.View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="c1">// el - stands for element. Every view has a element associate in with HTML</span>
</span><span class='line'>      <span class="c1">//      content will be rendered.</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>      <span class="c1">// It&amp;rsquo;s the first function called when this view it&amp;rsquo;s instantiated.</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">// $el - it&amp;rsquo;s a cached jQuery object (el), in which you can use jQuery functions</span>
</span><span class='line'>      <span class="c1">//       to push content. Like the Hello World in this case.</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>1.3.- Test the app</strong></p>

<p>After copying the code, open the file, refresh the browser and you should see the &lsquo;Hello World&rsquo; message, right? Wait, if you&rsquo;re just seeing the &lsquo;Loading…&rsquo; it&rsquo;s because you need to initialize the view first.</p>

<p><code>var appView = new AppView();</code></p>

<p>Yay! You have your &ldquo;Hello Wold&rdquo; in Backbone and an introduction to the View module. (Full code is <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">here</a>)</p>

<p><strong>1.4.- Backbone&rsquo;s Templates</strong></p>

<p>Backbone has a utility/helper library called <a href="http://underscorejs.org/?utm_source=adrianmejia.com">underscore.js</a> and you can use their template solution out of box. You can also use any other template solution that you want like <a href="https://github.com/janl/mustache.js">mustache</a> or <a href="https://github.com/wycats/handlebars.js">handlebars</a>. Let&rsquo;s stick with _.js for simplicity&rsquo;s sake.</p>

<p>_.js templates have the following syntax,</p>

<p><code>_.template(templateString, [data], [settings])</code></p>

<p>where in the <code>templateString</code> you use the place holder <code>&lt;%= %&gt;</code> and <code>&lt;%- %&gt;</code> to dynamically insert data. The later allows for HTML escape while the first one doesn&rsquo;t. Moreover, you can use <code>&lt;% %&gt;</code> to run any javascript code.</p>

<p>Let’s see it in action and rewrite our &ldquo;Hello World&rdquo; using a _.js template instead.</p>

<p><figure class='code'><figcaption><span>Simple Backbone.View and Templates <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;),</span>
</span><span class='line'>      <span class="c1">// template which has the placeholder &amp;lsquo;who&amp;rsquo; to be substitute later</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%=</span> <span class="nx">who</span> <span class="o">%&gt;&lt;</span><span class="err">/h3&gt;&amp;rdquo;),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// render the function using substituting the varible &amp;lsquo;who&amp;rsquo; for &amp;lsquo;world!&amp;rsquo;.</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">who</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">world</span><span class="o">!&amp;</span><span class="nx">rsquo</span><span class="p">;}));</span>
</span><span class='line'>        <span class="c1">//***Try putting your name instead of world.</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">appView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AppView</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Run the app again and verify that it&rsquo;s working with the template.</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">2nd part</a> and learn more about Backbone&rsquo;s Models, Collections, View and Events!</h3>
]]></content>
  </entry>
  
</feed>
