<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Adrian Mejia's Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2014-10-01T17:12:10-04:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Tutorial for Beginners With NodeJS ExpressJS and MongoDB]]></title>
    <link href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/"/>
    <updated>2014-09-28T23:50:24-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb</id>
    <content type="html"><![CDATA[<p>This tutorial is meant to be as simple as possible and at the same time teach you how to connect AngularJS with backend servers in Node.js, Express.js and databases such as MongoDB, also known as the MEAN stack. Let&rsquo;s start with angularJS</p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" >
<img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<h1>Brief Background (AngularJS vs jQuery vs BackboneJS vs EmberJS)</h1>

<p><a href="#start">TL; DR</a>: AngularJS is awesome for building testable single page applications (SPA), and also data driven and CRUD apps. <a href="#start">Show me the code!.</a></p>

<p>AngularJS motto is &ldquo;HTML enhanced for web apps!&rdquo;. That&rsquo;s exactly what it does. It extends default HTML tags and properties to bind events and data into it using JavaScript. It&rsquo;s a very different approach to other libraries such as jQuery, Backbone.js, Ember.js and similar&hellip; which follows the &ldquo;Unobtrusive JavaScript&rdquo; approach.</p>

<p>In the traditional unobtrusive JavaScript approach, instead of declaring the event handlers right in the element that they act upon, they are referenced using IDs and classes in the elements. That gives the advantage of separating structure (HTML) from behavior (Javascript). However, it doesn&rsquo;t do any better on code complexity and readability.</p>

<p>Times have changed since then. Let&rsquo;s examine closely how AngularJS tries to alleviate code complexity and readability.</p>

<ul>
<li>Unit testing ready: JavaScript is usually very hard to unit test when you have DOM manipulations and business logic together (e.g. jQuery based code). AngularJS keeps DOM manipulation in the HTML and business logic separated. Data and dependencies are injected as needed.</li>
<li>DOM manipulation where they are used. It decouples DOM manipulation from application logic.</li>
<li>AngularJS is also great for single page applications (SPA).</li>
<li>Different browsers implements features differently, but fret not. Angular’s directive (or HTML extensions) take care of the differences for you.</li>
<li>Global name space: expressions and method definitions are scoped by controllers, so they don’t pollute the global name space.</li>
<li>Data models are plain old JavaScript objects (POJO).</li>
<li>Write less code: AngualarJS features like directives, filters and automatic data bindings save a lot of code. (More on that later ;)</li>
<li>Modularization and dependencies handlers are provided by AngularJS.</li>
</ul>


<p>Despite all the goodness of AngularJS, it is not fit for every kind of project. Here&rsquo;s some guidelines I used&hellip;</p>

<ul>
<li>Need heavy DOM manipulations? Use jQuery or BackboneJS instead.</li>
<li>Data driven requirements (CRUD apps)? Use AngularJS.</li>
<li>Game programming? Use the canvas directly or game frameworks such as PhaserJS.</li>
<li>GUI editors? Use libraries with lower level abstractions such as jQuery.</li>
<li>Heavy RESTFul front-end app? Use Ember.js</li>
</ul>


<p>Without further ado, let’s dive in!!</p>

<h1>AngularJS</h1>

<p><a id="start"></a></p>

<h2>What is Angular.js?</h2>

<p>Angular.js is a MVC open-source JavaScript web framework that facilitates the creation of single-page applications (SPA) and data driven apps. It&rsquo;s not the single framework on its class, however it&rsquo;s one of the most used and growing.</p>

<h2>AngularJS Directives</h2>

<p>The first concept you need to know about AngularJS is what are directives.</p>

<p><strong>Directives</strong> are extensions of HTML markups in form of attributes, element names, CSS class and so on. When the AngularJS framework is loaded everything inside <code>ng-app</code> it&rsquo;s compiled by Angular and the directives are bound to data, events and/or DOM transformations.</p>

<p>Notice two directive on the following example <code>ng-app</code> and <code>ng-model</code>.</p>

<p>&#8220;`html Hello World in AngularJS <a href="http://codepen.io/amejiarosario/pen/KdLaq">http://codepen.io/amejiarosario/pen/KdLaq</a>
<html ng-app>
<head>
  <title>Hello World in AngularJS</title>
</head>
<body></p>

<p><input ng-model="name"> Hello {{ name }}</p>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js"></script>


<p></body>
</html>
&#8220;`</p>

<ul>
<li><strong>ng-app</strong>: is a directive that bootstraps AngularJS and designates the element which have it as the root element. It&rsquo;s usually placed on <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</li>
<li><strong>ng-model</strong>: is a directive that binds form elements such as <code>input</code>, <code>select</code>, <code>checkboxes</code>, <code>textarea</code> or custom ones to a property called <code>$scope</code>. More on <code>$scope</code> and <code>data binding</code> in the next sections, for now bear in mind that the textbox value in the input it&rsquo;s bound to <code>{{ name }}</code></li>
<li><strong>{{ name }}</strong> <code>{{ }}</code> are way of binding <code>models</code> to elements in HTML. In the example above the model <code>name</code> is bound to the placeholder <code>{{ name }}</code>. Play with the example bellow to see how the placeholder is updated real-time to whatever you type in the textbox.</li>
</ul>


<p>Data binding AngularJS example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="KdLaq" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/KdLaq/'>KdLaq</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<h2>AngularJS Data Binding</h2>

<p><strong>Data binding</strong> is an AngularJS feature that automatically synchronizes your model data with your HTML. That&rsquo;s great because models is the <code>single-source-of-truth</code> and you don&rsquo;t have to worry about updating them. Here&rsquo;s a graph from docs.angularjs.org.</p>

<p><img src="/images/Two_Way_Data_Binding.png" title="Two Data Binding in Angular Templates" ></p>

<p>Whenever the HTML is changed the model gets updated and wherever the model gets updated it is reflected in HTML.</p>

<h2>AngularJS Scope</h2>

<p><code>$scope</code> it is an object that contains all the data to which HTML is bound. They are the glue your javascript code (controllers) and the view (HTML). Everything that is bound to the <code>$scope</code>, it is automatically <code>$watch</code>ed by AngularJS and updated.</p>

<p>Scopes can be bound to javascript functions and also you could have more than one <code>$scope</code> and inherit from outer ones. More on this in the controllers section.</p>

<h2>AngularJS Controllers</h2>

<p>Angular.js <strong>controllers</strong> are code that &ldquo;controls&rdquo; certain sections containing DOM elements in which they are declared. They encapsulate the behavior, callbacks and glue <code>$scope</code> models with views. Let&rsquo;s see an example to drive the concept home:</p>

<pre><code class="html AngularJS Controller Example http://codepen.io/amejiarosario/pen/spuCm">&lt;body ng-controller="TodoController"&gt;
  &lt;ul&gt;
    &lt;li ng-repeat="todo in todos"&gt;
      &lt;input type="checkbox" ng-model="todo.completed"&gt;
      {{ todo.name }}
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
    function TodoController($scope){
      $scope.todos = [
        { name: 'Master HTML/CSS/Javascript', completed: true },
        { name: 'Learn AngularJS', completed: false },
        { name: 'Build NodeJS backend', completed: false },
        { name: 'Get started with ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ]
    }
  &lt;/script&gt;  
&lt;/body&gt;
</code></pre>

<p>AngularJS controller interactive example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="spuCm" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/spuCm/'>spuCm</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>As you might notice we have new friends: <code>ng-controller</code>, <code>ng-repeat</code> and <code>$scope</code>.</p>

<ul>
<li><p><strong><code>ng-controller</code></strong> is a directive which tells angular what function controller to use for a particular view. Everytime AngularJS loads, it reads the <code>ng-controller</code> argument (in this case &ldquo;TodoController&rdquo;). Then, it will look for a function in plain old javascript object (POJO) with the same name or for <code>angular.controller</code> matching name.</p></li>
<li><p><strong><code>$scope</code></strong> As mentioned earlier <code>$scope</code>&rsquo;s are the glue between the data models in the controllers and the views. Take a look to our &ldquo;TodoController&rdquo; it has a parameter named <code>$scope</code>. AngularJS is going to pass (<code>$inject</code>) that parameter and whatever you attach to it, it will be available in the view. In this example is the particular is the <code>todos</code> array of objects.</p></li>
<li><p><strong><code>ng-repeat</code></strong> as its name implies, it is going to &ldquo;repeat&rdquo; the element and sub-elements where this directive is declared. The number of times it&rsquo;s going to repeat the elements it&rsquo;s going to match the length of array in <code>$scope.todos</code>.</p></li>
<li><p><strong><code>ng-model</code></strong> take a special attention to the checkbox with is bound to the <code>todo.completed</code>. If completed it&rsquo;s true it&rsquo;s going to be checked automatically and vice versa.</p></li>
</ul>


<h2>AngularJS Modules</h2>

<p>Modules is a way to encapsulate different parts of your application (directives, controllers, factories, &hellip;) and reuse them easily. Here&rsquo;s an example of how to rewrite our controller using modules.</p>

<pre><code class="javascript AngularJS Module Example http://codepen.io/amejiarosario/pen/spuCm">angular.module('app', [])
  .controller('TodoController', ['$scope', function ($scope) {
    $scope.todos = [
      { title: 'Learn Javascript', completed: true },
      { title: 'Learn Angular.js', completed: false },
      { title: 'Love this tutorial', completed: true },
      { title: 'Learn Javascript design patterns', completed: false },
      { title: 'Build Node.js backend', completed: false },
    ];
  }]);
</code></pre>

<p>Notice the <code>&lt;html ng-app="app"&gt;</code> in the example bellow</p>

<p data-height="268" data-theme-id="0" data-slug-hash="uFfqG" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/uFfqG/'>uFfqG</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>Using modules brings many advantages such as modules can be loaded in any order, parallel dependency loading, tests can only load the required modules and keep it fast, clear view of the dependencies.</p>

<h2>AngularJS Templates</h2>

<p>Templates contains HTML and Angular elements (directives, markup, filters or form controls). They can be cached and referenced by an id.</p>

<p>Here&rsquo;s an example:</p>

<pre><code class="html AngularJS Template Example https://gist.github.com/amejiarosario/eebd176cb1796769ec2b download">  &lt;script type="text/ng-template" id="/todos.html"&gt;
    &lt;ul&gt;
      &lt;li ng-repeat="todo in todos"&gt;
        &lt;input type="checkbox" ng-model="todo.completed"&gt;
        
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/script&gt;
</code></pre>

<p>Does the code inside looks familiar? ;)</p>

<p>Notice they are inside a <code>script</code> and has a type <code>text/ng-template</code>.</p>

<h2>AngularJS Routes (ngRoutes)</h2>

<p>ngRoutes module allows changing what we see in the app depending on the URL (route). It usually uses templates to inject the HTML into the app.</p>

<p>It doesn&rsquo;t come with AngularJS core so we have to add it as a dependency. So, we are going to get it from Google CDN:</p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js"&gt;&lt;/script&gt;</code></p>

<p>Let&rsquo;s say that in our todo app we want to add notes to each one. So let&rsquo;s do that using routes!</p>

<pre><code class="javascript">angular.module('app', ['ngRoute'])
  .config(['$routeProvider', function ($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: '/todos.html',
        controller: 'TodoController'
      });
  }]);
</code></pre>

<p data-height="268" data-theme-id="0" data-slug-hash="CmnFH" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/CmnFH/'>CmnFH</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<ul>
<li>First notice that we removed <code>ng-controller="TodoController"</code> from the body tag. The controller we be called based upon the route.</li>
<li><code>ngView</code> is a directive used by <code>$route</code> to render HTML into it. Everytime the route changes, it also updates the <code>ngView</code>.</li>
</ul>


<h2>AngularJS Services (factory)</h2>

<p>Notice that if you want to create a 2nd controller and share $scope.todos it is not possible right now. That&rsquo;s when services become handy. Services are a way to inject data dependencies into controllers. They are created through factories. Let&rsquo;s see it in action:</p>

<pre><code class="javascript AngularJS Service Factory Example">  angular.module('app', ['ngRoute'])

    .factory('Todos', function(){
      return [
        { name: 'AngularJS Directives', completed: true },
        { name: 'Data binding', completed: true },
        { name: '$scope', completed: true },
        { name: 'Controllers and Modules', completed: true },
        { name: 'Templates and routes', completed: true },
        { name: 'Filters and Services', completed: false },
        { name: 'Get started with Node/ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ];
    })

    .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
      $scope.todos = Todos;
    }])
</code></pre>

<p>We are now injecting the data dependency <code>Todo</code> into the controllers. This way we could reuse the data to any controller or module that we need to. This is not only used for static data like the array, but we could also do server calls using <code>$http</code> or even RESTful  <code>$resource</code>.</p>

<p>Let&rsquo;s say we want to show the details of the task when we click on it. For that, we need to create a 2nd controller, template and route that uses this service:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="pGkhg" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/pGkhg/'>pGkhg</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>(NOTE: Click on the links and it will take you to the todo details. Use backspace key to go back to main menu)</p>

<p>This is what is happening:</p>

<ol>
<li>In the <code>HTML</code> tab we created a second template <code>/todoDetails.html</code> which contains the todo details we want to show.</li>
<li>Also, in our previous template <code>/todos.html</code> we want to have a link that points to the <code>todo</code> detail. We are using the <code>$index</code> which is the corresponding order number in a <code>ng-repeat</code>.</li>
<li>In the <code>JS</code> tab we created a new <code>$routeProvider</code> which points to a new controller <code>TodoDetailCtrl</code> and the template that we created on #1. The <code>:id</code> parameter it&rsquo;s accessible in the controllers through <code>$routeParams</code>.</li>
<li>Created the new controller <code>TodoDetailCtrl</code> and inject the dependencies which are <code>$scope</code>, <code>Todos</code> (factory), and <code>$routeParams</code> which will have the <code>id</code> param.</li>
<li>Set the <code>$scope</code> in the new controller. Instead of using the whole array, we are going to select only the one that we need using the <code>id</code> that we set in step #2.</li>
</ol>


<p>NOTE: in codepen you won&rsquo;t see the URL, but you can download the whole example an open it from <a href="https://gist.github.com/amejiarosario/f0a82c7a0eec4786f1c9" target="_blank">here</a>.</p>

<h2>AngularJS Filters</h2>

<p>Filters allows you to format and transform the output of expressions inside the curly braces. AngularJS comes with a bunch of useful filters.</p>

<p><strong>Built-in Filters</strong>:</p>

<ul>
<li><em>filter</em>: search for a given string in an array and return matches.</li>
<li><em>Number</em>: adds comma separated 1000&rsquo;s and 2 decimal places.</li>
<li><em>Currency</em>: the same as <em>Number</em> and adds a $ in front.</li>
<li><em>Date</em>: takes a unix timestamp (e.g. 1288323623006) or date string and output it in the format that you specify (e.g. &lsquo;longDate&rsquo; or fragments &lsquo;yyyy&rsquo; for 4 digit years). For a full list see <a href="https://docs.angularjs.org/api/ng/filter/date" target="_blank">here</a>.</li>
<li><em>JSON</em>: converts javascript objects to JSON strings.</li>
<li><em>lowercase</em>/<em>uppercase</em>: converts strings to lowercase/uppercase.</li>
<li><em>limitTo</em>: number of elements from an array to show.</li>
<li><em>orderBy</em>: order array of objects by key that you specify.</li>
</ul>


<p><strong>Note</strong> you can also chain multiple filters and also define your own filters.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="tyuDK" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/tyuDK/'>tyuDK</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>After a while using our Todo app it will become a large list of item and we might what to search to find them easily. Let&rsquo;s use a filter to solve that problem.</p>

<pre><code class="html">  &lt;script type="text/ng-template" id="/todos.html"&gt;
    Search: &lt;input type="text" ng-model="search.name"&gt;
    &lt;ul&gt;
      &lt;li ng-repeat="todo in todos | filter: search"&gt;
        &lt;input type="checkbox" ng-model="todo.completed"&gt;
        &lt;a href="#/"&gt;&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/script&gt;
</code></pre>

<p>Notice that we are using <code>search.name</code> in the <code>ng-model</code> for search. That will limit the search to the <code>name</code> attribute and <code>search.notes</code> will look inside the notes only. Guest what <code>search</code> would do then? Exactly, search in all the attributes. For the following example and try it out:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="ahwbz" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/ahwbz/'>ahwbz</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>




<hr>


<h1>ng-knowledge</h1>

<p>Congrats, you have reach this far! It&rsquo;s time to <code>test</code> what you have learned. Test Driven Learning (TDL). Open this <a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html" target="_blank">file</a> on your favarite code editor. Copy the boilerplate code and built the full app that we just build in the previous examples. Of course, you can take a peek from time to time if you get stuck ;)</p>

<p>Download this file as&hellip;:</p>

<p><a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html">index.html</a></p>

<p>-OR-</p>

<p>Fork and edit online:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="degzC" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/degzC/'>degzC</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<h1>What&rsquo;s next?</h1>

<p>We are going to build upon the things learned in here, in the next post we are going to setup a backend in NodeJS and MongoDB and connect it to AngularJS to provide a full featured CRUD app. Stay tune for the next two posts:</p>

<ul>
<li>Creating API with NodeJS, ExpressJS and MongoDB tutorial for beginners</li>
<li>Full CRUD AngularJS app with NodeJS and MongoDB</li>
</ul>


<p>I also have created BackboneJS tutorials check it out:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/categories/backbonejs" target="_blank">BackboneJS Tutorials</a></li>
</ul>


<script async src="//codepen.io/assets/embed/ei.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 4: Routers)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/"/>
    <updated>2012-09-13T14:41:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4</id>
    <content type="html"><![CDATA[<h1>BackboneJS IV</h1>

<p>The part 3 of this tutorial is <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">here</a>.</p>

<h2>2.6 Backbone.Router</h2>

<p>You could build web application without using the routers.  However, if you want to make reference to certain ‘state’ or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.</p>

<p>Routing in most of JS application are achieved by hash-tags. E.g. If you take a look of Gmail URL you will see something like:</p>

<p><code>https://mail.google.com/mail/u/0/#inbox/139c0d48e11d986b</code></p>

<p>where the <code>#inbox/139c0d48e11d986b</code> is the hash-tag which reference some email location.</p>

<p>In backbone, routes are hash maps that match URL patterns to functions. You can use parameter parts, such as <code>todos/:id</code>, or using splats <code>file/*path</code> you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.</p>

<h3>2.6.1 Initializing the Router</h3>

<p>In our Todo app, we are going to use routers to filter between the tasks that are pending and the ones that have been completed. So, let&rsquo;s initialize the routes this way:</p>

<p><figure class='code'><figcaption><span>Define Router <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;*filter&#39;</span> <span class="o">:</span> <span class="s1">&#39;setFilter&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">setFilter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;app.router.params = &#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">);</span> <span class="c1">// just for didactical purposes.</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">filter</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, you need to initialize it, adding this lines:</p>

<p><figure class='code'><figcaption><span>Initialize router <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; //--------------
</span><span class='line'> // Initializers
</span><span class='line'> //--------------
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt; app.router = new app.Router();&lt;/li&gt;
</span><span class='line'>&lt;li&gt; Backbone.history.start();
</span><span class='line'> app.appView = new app.AppView();&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>You can test that you router is working just typing <code>#anything/that/you/want</code> and seeing the parameter in you browser&rsquo;s console.</p>

<h3>2.6.1 Processing the routes</h3>

<p>Before rendering the list of items, you need to check the parameters to wether show only the pending ones, or the completed or show them all. As shown in the code snipet below.</p>

<p><figure class='code'><figcaption><span>Processing the routes in app.AppView <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -164,7 +177,18 @@
</span><span class='line'>       },
</span><span class='line'>       addAll: function(){
</span><span class='line'>         this.$(&amp;lsquo;#todo-list&amp;rsquo;).html(&amp;lsquo;&amp;rsquo;); // clean the todo list
</span><span class='line'><span class="gd">-        app.todoList.each(this.addOne, this);</span>
</span><span class='line'><span class="gi">+        // filter todo item list</span>
</span><span class='line'><span class="gi">+        switch(window.filter){</span>
</span><span class='line'><span class="gi">+          case &amp;lsquo;pending&amp;rsquo;:</span>
</span><span class='line'><span class="gi">+            &lt;em&gt;.each(app.todoList.remaining(), this.addOne);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+          case &amp;lsquo;completed&amp;rsquo;:</span>
</span><span class='line'><span class="gi">+            &lt;/em&gt;.each(app.todoList.completed(), this.addOne);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+          default:</span>
</span><span class='line'><span class="gi">+            app.todoList.each(this.addOne, this);</span>
</span><span class='line'><span class="gi">+            break;</span>
</span><span class='line'><span class="gi">+        }</span>
</span><span class='line'>       },
</span><span class='line'>       newAttributes: function(){
</span><span class='line'>         return {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>If you try adding the words <code>#/pending</code> or <code>#/completed</code> at the end of the URL you&rsquo;ll get an error!. That&rsquo;s a good sign, it means the routes are working, but we haven&rsquo;t implemented the <code>app.todoList.remaining()</code> and <code>app.todoList.completed()</code>. So, that&rsquo;s next:</p>

<p><figure class='code'><figcaption><span>Defining &lsquo;completed&rsquo; and &lsquo;remaining&rsquo; functions in app.TodoList <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -85,7 +90,15 @@
</span><span class='line'>     //&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
</span><span class='line'>     app.TodoList = Backbone.Collection.extend({
</span><span class='line'>       model: app.Todo,
</span><span class='line'><span class="gd">-      localStorage: new Store(&amp;ldquo;backbone-todo&amp;rdquo;)</span>
</span><span class='line'><span class="gi">+      localStorage: new Store(&amp;ldquo;backbone-todo&amp;rdquo;),</span>
</span><span class='line'><span class="gi">+      completed: function() {</span>
</span><span class='line'><span class="gi">+        return this.filter(function( todo ) {</span>
</span><span class='line'><span class="gi">+          return todo.get(&amp;lsquo;completed&amp;rsquo;);</span>
</span><span class='line'><span class="gi">+        });</span>
</span><span class='line'><span class="gi">+      },</span>
</span><span class='line'><span class="gi">+      remaining: function() {</span>
</span><span class='line'><span class="gi">+        return this.without.apply( this, this.completed() );</span>
</span><span class='line'><span class="gi">+      }</span>
</span><span class='line'>     });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, if you try again adding the hash-tags it will work! But, it will be better if the user can have links to that instead of typing URLs. So, let&rsquo;s add them.</p>

<p><figure class='code'><figcaption><span>Show routes&#8217; links <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -32,6 +32,11 @@
</span><span class='line'>     &lt;header id=&quot;header&quot;&gt;
</span><span class='line'>       &lt;h1&gt;Todos&lt;/h1&gt;
</span><span class='line'>       &lt;input id=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus&gt;
</span><span class='line'><span class="gi">+      &lt;div&gt;</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/&quot;&gt;show all&lt;/a&gt; |</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/pending&quot;&gt;show pending&lt;/a&gt; |</span>
</span><span class='line'><span class="gi">+        &lt;a href=&quot;#/completed&quot;&gt;show completed&lt;/a&gt;</span>
</span><span class='line'><span class="gi">+      &lt;/div&gt;</span>
</span><span class='line'>     &lt;/header&gt;
</span><span class='line'>     &lt;section id=&quot;main&quot;&gt;
</span><span class='line'>       &lt;ul id=&quot;todo-list&quot;&gt;&lt;/ul&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Well, that&rsquo;s all! If completed these 4 parts tutorial you will be familiar with the main Backbone modules (Models, Collections, Views, Events, and Routes). To increase you knowledge you can follow the following resources:</p>

<ul>
<li><a href="https://github.com/documentcloud/backbone/blob/master/backbone.js">Backbone&rsquo;s Source code - it&rsquo;s the ultimate source of true</a></li>
<li><a href="http://backbonejs.org/?utm_source=adrianmejia.com">Official documentation</a></li>
</ul>


<p>Hope it was helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 3: CRUD)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/"/>
    <updated>2012-09-13T01:37:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3</id>
    <content type="html"><![CDATA[<h1>BackboneJS III</h1>

<p>The part 2 of this tutorial is <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">here</a>.</p>

<h2>2.5 Todo item list CRUD</h2>

<p>There are a couple of features that we could improve. Let’s implement the CRUD (Create-Read-Update-Delete) for the item list.</p>

<h3>2.5.1. C-reate</h3>

<p>We are already can create item list from the console (2.3) and also from the UI (2.4.3). So, it’s done.</p>

<h3>2.5.2. U-pdate</h3>

<p>What if you make a mistake and want to change the text on some of your to-do list. Furthermore, you can notice that the checkboxes states are not persistent when you reload the pages. Let’s fix both problems.</p>

<p>1.- You want to respond to a double click event showing up a text box, where the user can change the text. First, let’s add the HTML in the <code>item-template</code> template below the label tag.</p>

<p><code>&lt;input class="edit" value="&lt;%- title %&gt;"&gt;</code></p>

<p>2.- If you refresh, you will notice that there are both displaying at the same time. So, you can hide them properly with the following CSS.
<figure class='code'><figcaption><span>CSS <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">pre</span><span class="o">&gt;&lt;</span><span class="nt">code</span><span class="o">&gt;</span><span class="nf">#todo-list</span> <span class="nt">input</span><span class="nc">.edit</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="c">/* Hides input box*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#todo-list</span> <span class="nc">.editing</span> <span class="nt">label</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="c">/* Hides label text when .editing*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#todo-list</span> <span class="nc">.editing</span> <span class="nt">input</span><span class="nc">.edit</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span> <span class="c">/* Shows input text box when .editing*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">code</span><span class="o">&gt;&lt;/</span><span class="nt">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>3.- Then, we need to add the events to the TodoView class to respond to the changes.</p>

<p><figure class='code'><figcaption><span>Todo Model <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders individual todo items list (li)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#item-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// enable chained calls</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;dblclick label&#39;</span> <span class="o">:</span> <span class="s1">&#39;edit&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;keypress .edit&#39;</span> <span class="o">:</span> <span class="s1">&#39;updateOnEnter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;blur .edit&#39;</span> <span class="o">:</span> <span class="s1">&#39;close&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">edit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;editing&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;editing&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">updateOnEnter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">13</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can find the <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/3840dc802d6f311528298639150a5f52364c1975">diff</a> that were added to implement the update feature.</p>

<p><a href="https://github.com/amejiarosario/Backbone-tutorial/commit/19fa69e654ae5d370385675e4ffed615532b9934">Here</a> are the changes to fix the update for the checkboxes.</p>

<h3>2.5.2. D-elete</h3>

<p>To be able to remove to-do items, we need to add a remove button in each item and listen to the click event on it, which will trigger the destroy function in the selected todo object.</p>

<p>1.- Add the HTML markup for the remove button.</p>

<p><figure class='code'><figcaption><span>Remove Button into &lsquo;item template&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -47,6 +47,7 @@
</span><span class='line'>       &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; &lt;%= completed ? &#39;checked&#39; : &#39;&#39; %&gt;&gt;
</span><span class='line'>       &lt;label&gt;&amp;lt;%- title %&gt;&lt;/label&gt;
</span><span class='line'>       &lt;input class=&quot;edit&quot; value=&quot;&lt;%- title %&gt;&amp;ldquo;&gt;
</span><span class='line'><span class="gi">+      &lt;button class=&quot;destroy&quot;&gt;remove&lt;/button&gt;</span>
</span><span class='line'>     &lt;/div&gt;
</span><span class='line'>   &lt;/script&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>2.- Listen for the click event in the button that you just created.</p>

<p><figure class='code'><figcaption><span>Add event listeners for the Remove Button in &lsquo;app.TodoView&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -105,12 +106,14 @@
</span><span class='line'>       },
</span><span class='line'>       initialize: function(){
</span><span class='line'>         this.model.on(&amp;lsquo;change&amp;rsquo;, this.render, this);
</span><span class='line'><span class="gi">+        this.model.on(&amp;lsquo;destroy&amp;rsquo;, this.remove, this); // remove: Convenience Backbone&#39;</span>
</span><span class='line'>       },
</span><span class='line'>       events: {
</span><span class='line'>         &amp;lsquo;dblclick label&amp;rsquo; : &amp;lsquo;edit&amp;rsquo;,
</span><span class='line'>         &amp;lsquo;keypress .edit&amp;rsquo; : &amp;lsquo;updateOnEnter&amp;rsquo;,
</span><span class='line'>         &amp;lsquo;blur .edit&amp;rsquo; : &amp;lsquo;close&amp;rsquo;,
</span><span class='line'><span class="gd">-        &amp;lsquo;click .toggle&amp;rsquo;: &amp;lsquo;toggleCompleted&amp;rsquo;</span>
</span><span class='line'><span class="gi">+        &amp;lsquo;click .toggle&amp;rsquo;: &amp;lsquo;toggleCompleted&amp;rsquo;,</span>
</span><span class='line'><span class="gi">+        &amp;lsquo;click .destroy&amp;rsquo;: &amp;lsquo;destroy&amp;rsquo;</span>
</span><span class='line'>       },
</span><span class='line'>       edit: function(){
</span><span class='line'>         this.$el.addClass(&amp;lsquo;editing&amp;rsquo;);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>3.- Add the destroy method to the TodoView.</p>

<p><figure class='code'><figcaption><span>Add the destroy method to &lsquo;app.TodoView&rsquo; <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -130,7 +133,10 @@
</span><span class='line'>       },
</span><span class='line'>       toggleCompleted: function(){
</span><span class='line'>         this.model.toggle();
</span><span class='line'><span class="gd">-      }</span>
</span><span class='line'><span class="gi">+      },</span>
</span><span class='line'><span class="gi">+      destroy: function(){</span>
</span><span class='line'><span class="gi">+        this.model.destroy();</span>
</span><span class='line'><span class="gi">+      }</span>
</span><span class='line'>     });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>You can download the full working code so far in <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">here</a> and you can visualize the changes needed to implement the delete feature in <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/1267e531ae3ef508eb32e5308c2cc965f02d1b45">here</a></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">4th part</a> and learn about Backbone&rsquo;s Routes!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 2: Models, Collections and Views)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/"/>
    <updated>2012-09-13T00:08:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2</id>
    <content type="html"><![CDATA[<h1>BackboneJS II</h1>

<p>The part 1 of this tutorial is <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">here</a></p>

<h2>2. Todo App in Backbone</h2>

<p>After completing this example app, you will have experience and basic understanding of all the modules of Backbone!</p>

<p>(Updated: 2013-02-02, 2013-11-24)
Notice: This tutorial was written using Backbone v.0.9.x, now version 1.1.x or later are out. However, all the principles exaplained here applies for both.</p>

<h3>2.1.- Todo app Boiler plate</h3>

<p>Let&rsquo;s start again with the initial <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html">HTML file</a> used on 1.1. Now, instead of div#container let&rsquo;s add the following HTML code:</p>

<p><figure class='code'><figcaption><span>HTML Structure <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;todoapp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;new-todo&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;What needs to be done?&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;todo-list&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We are going to implement a To-do list, which is basically un-ordered list (ul) of elements with checkboxes.</p>

<h3>2.2.- Backbone.Model</h3>

<p>Models are the heart of every application. It contains the interactive data and the logic surrounding it, such as data validation, getters and setters, default values, data initialization, conversions and so on.
For our example, we are going to create a model called <code>Todo</code>, which will store a string of text (title) and whether the task has been completed or not.</p>

<p><figure class='code'><figcaption><span>Todo Model <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// create namespace for our app</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice, that for convention classes names are capitalize, while instance variables and objects are not. Another important aspect of models it’s that their properties are dynamic; they can be created on the fly and doesn’t have any specific type associated.</p>

<p><strong>Test what you just coded!</strong></p>

<p>After you completed the code snippet above you can open your browser console (chrome&rsquo;s console: ctrl+shift+i -or- ⌘+alt+i) and try this out, to get familiar with the models:</p>

<p><figure class='code'><figcaption><span>Practice in your Browser\&rsquo;s console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span> <span class="c1">// create object with the attributes specified.</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">title</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// &amp;ldquo;Learn Backbone.js&amp;rdquo;</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">completed</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// undefined</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">created_at</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// &amp;ldquo;Wed Sep 12 2012 12:51:17 GMT-0400 (EDT)&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2.3.- Backbone.Collection</h3>

<p>As its name indicates, collections are ordered sets of models, where you can get and set models in the collection, listen for events when any element in the collection changes, and fetching for model’s data from the server.</p>

<p>E.g.: <code>todoList.fetch();</code></p>

<p>Collections allows to save data (in database, file, memory), and it requires a reference to it. Therefore, you need to specify the <code>url</code> parameter with a relative url, where the model’s resource would be located on the server. Otherwise, you will get errors like:</p>

<p><code>A "url" property or function must be specified</code></p>

<p>We are not going to use a backend server for simplicity (I will do a new post for that); instead we are going to use HTML5’s local storage for persistence through a Backbone’s plugin. So, we need to define the localStorage property instead of URL. You need to include the backbone-localstorage.js with the rest of your libs as <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">shown in the full code</a>:</p>

<p><code>&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js" type="text/javascript"&gt;</code></p>

<p><figure class='code'><figcaption><span>Todo list Collection <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">localStorage</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Store</span><span class="p">(</span><span class="s2">&quot;backbone-todo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instance of the Collection</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>Test what you just your coded!</strong></p>

<p>(Google&rsquo;s Chrome console shortcuts: ctrl+shift+i -or- ⌘+alt+i)</p>

<p><figure class='code'><figcaption><span>Practice in your Browser\&rsquo;s console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">todoList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoList</span><span class="p">()</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Backbone</span><span class="err">\</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">s</span> <span class="nx">Collection</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;});</span> <span class="c1">// notice: that &lt;code&gt;completed&lt;/code&gt; will be set to false by default.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lmodel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Learn</span> <span class="nx">Models</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">lmodel</span><span class="p">);</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">title</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>     <span class="c1">// [&amp;ldquo;Learn Backbone&amp;rsquo;s Collection&amp;rdquo;, &amp;ldquo;Learn Models&amp;rdquo;]</span>
</span><span class='line'><span class="nx">todoList</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">completed</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// [false, true]</span>
</span><span class='line'><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todoList</span><span class="p">);</span>    <span class="c1">// &amp;ldquo;[{&quot;title&amp;rdquo;:&amp;ldquo;Learn Backbone&amp;rsquo;s Collection&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:false,&amp;ldquo;id&amp;rdquo;:&amp;ldquo;d9763e99-2267-75f5-62c3-9d7e40742aa6&amp;rdquo;},{&amp;ldquo;title&amp;rdquo;:&amp;ldquo;Learn Models&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:true}]&amp;ldquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>2.4.- Backbone.View</h2>

<p>As mentioned in <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>, Views doesn’t have the HTML markups for our application, but instead (It&rsquo;s like the controller in MVC frameworks) process data and link it to templates and it finally render HTML based on events or data changes.</p>

<h3>2.4.1.- Basic Properties</h3>

<p>There are 4 basic properties in a view: el, initialize, render, and events.</p>

<p>We have already seen the first 3 and will see later the fourth one. Do you remember the Hello World View from <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>?</p>

<p><figure class='code'><figcaption><span>Example of a Backbone.View </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="c1">// el - stands for element. Every view has a element associate in with HTML</span>
</span><span class='line'>      <span class="c1">//      content will be rendered.</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>      <span class="c1">// It&amp;rsquo;s the first function called when this view it&amp;rsquo;s instantiated.</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">// $el - it&amp;rsquo;s a cached jQuery object (el), in which you can use jQuery functions</span>
</span><span class='line'>      <span class="c1">//       to push content. Like the Hello World in this case.</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2.4.1.1.- <code>view.el</code></h3>

<p>Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the <code>el</code> property. <code>this.el</code> is created from view’s <code>el</code>,<code>tagName</code>, <code>className</code>, <code>id</code> or <code>attributes</code> properties. If none of these are specified, then this.el is an empty <code>div</code>. The <code>view.$el</code> it’s a cached jQuery object of the view’s element (view.el).</p>

<h3>2.4.1.2.- Initialize/construtor</h3>

<p>Here you have the option to pass parameters that will be attached to a model, collection or view.el.</p>

<h3>2.4.1.3.- <code>render</code></h3>

<p>This function injects the markup into the elements. Not all views require having a render function, as you are going to see in the sample code, they can call other view’s render functions.</p>

<h3>2.4.1.5.- delegated events</h3>

<p>Events are written in the following format:</p>

<p><code>{"&lt;EVENT_TYPE&gt; &lt;ELEMENT_ID&gt;": "&lt;CALLBACK_FUNTION&gt;"}</code></p>

<p>E.g.</p>

<p><code>events: {'keypress #new-todo': 'createTodoOnEnter'}</code></p>

<p>in jQuery it would be something like:</p>

<p><code>$('#new-todo').keypress(createTodoOnEnter);</code></p>

<h2>2.4.2.- Todo View</h2>

<p>Now back to our To-do application: We need a view that renders each of the todo model objects into the page. The <code>item-template</code> and <code>app.TodoView</code> will render each todo item.</p>

<p><figure class='code'><figcaption><span>item-template <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>  <span class="ni">&amp;lt;</span>script type=&quot;text/template&quot; id=&quot;item-template&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div class=&quot;view&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>input class=&quot;toggle&quot; type=&quot;checkbox&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>label<span class="ni">&amp;gt;&amp;lt;</span>%- title %<span class="ni">&amp;gt;&amp;lt;</span>/label<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In the following block of code we have the Backbone.View which uses the above template (<code>#item-template</code>) to fill it out the title from the <code>model</code> we pass along.</p>

<p><figure class='code'><figcaption><span>Todo View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders individual todo items list (li)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#item-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// enable chained calls</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When we instanciate the views, they can receive any parameter that we need. In our case we call it <code>model</code> so we need to instanciated with a model (e.g. todo):</p>

<p><code>var view = new app.TodoView({model: todo});</code></p>

<p>Also notice that it&rsquo;s using a <code>tagName: li</code> instead of the just <code>el</code> from before. This mean that the new render elements will be wrapped around a <code>&lt;li&gt;&lt;/li&gt;</code></p>

<h2>2.5.- Backbone.Events</h2>

<p>This module can be mixed with any object and give it the pub/sub (observer patter) behaviour. Events provides a couple of methods from which we are going to discuss: <code>on</code>, <code>off</code> and <code>trigger</code>. (If this you are familiar with then in jQuery, they will work the same way + some nice built-in features)</p>

<h3>2.5.1 on</h3>

<p><code>object.on(event, callback, [context])</code></p>

<p>Also called bind. It binds an object to an event and a callback. When that event it&rsquo;s triggered it executes the callback.</p>

<p>E.g.
<code>todoList.on('add', this.addAll, this);</code></p>

<p>Everytime a new item is <code>add</code>ed to a Backbone.Collection the event <code>add</code> is triggered. In the example above, after the event is triggered the todoList&rsquo;s callback <code>addAll()</code> is executed and the current object is passed with <code>this</code> as a <code>context</code>.</p>

<p>Events can also be set on arbitrary objects using underscore.js <code>extend</code> function:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Triggered</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span> <span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Events</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">object</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my_event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">callback</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">object</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my_event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">my</span> <span class="nx">custom</span> <span class="nx">event</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>App View</h2>

<p>Now, we need another view that take a collection and render each of the individual items. We are going to call it ‘AppView’. Take a look through this code and try to identify each of the elements (we have already describe them in the previous sections).</p>

<p><figure class='code'><figcaption><span>Todo View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// renders the full list of todo items calling TodoView for each one.</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#todoapp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#new-todo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// when new elements are added to the collection render then with addOne</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addOne</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addAll</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span> <span class="c1">// Loads list from local storage</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;keypress #new-todo&#39;</span><span class="o">:</span> <span class="s1">&#39;createTodoOnEnter&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">createTodoOnEnter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">!==</span> <span class="mi">13</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">// ENTER_KEY = 13</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">newAttributes</span><span class="p">());</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// clean input box</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">addOne</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todo</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">TodoView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">todo</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#todo-list&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">addAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#todo-list&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// clean the todo list</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">todoList</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">addOne</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">newAttributes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------</span>
</span><span class='line'><span class="c1">// Initializers</span>
</span><span class='line'><span class="c1">//--------------   </span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">appView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">app</span><span class="p">.</span><span class="nx">AppView</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">3rd part</a> and learn how to make CRUD for your models!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting Started (Part 1: Intro)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/"/>
    <updated>2012-09-11T22:50:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started</id>
    <content type="html"><![CDATA[<p>Backbone.js is a JavaScript framework, among many others, that is gaining special attention in the web development community because it&rsquo;s ease of use and the structure that it provides to JavaScript applications.</p>

<p><img src="/images/backbonejs.png"></p>

<p>(Updated: 2013-02-02, 2013-11-24)</p>

<h1>Brief Background</h1>

<p><a href="#start">TL; DR</a>: You need to use JavaScript heavily in order to make responsive and interactive web applications. <a href="#start">Jump to this and get started.</a></p>

<p>The web application development process has been evolving over the years. In the beginning web applications were just static HTML pages, which required programmers to change the code (HTML, CSS, JS) in order to change the content. Later, in web 2.0, server side programming languages (like PHP, Ruby, Java, …) were added to generate HTML pages dynamically based on user input and data stored in database. That was a huge improvement, and most of the pages served today use this approach. However, to provide the web site with even more responsiveness, speed, and enhanced user interaction, it requires bringing the logic closer to the client (browser).  There are a couple of languages that can run in the browsers besides JS, such as Java, Flash and others. However, these require extra plugins and are not as ubiquitous as JavaScript.</p>

<p>Web applications nowadays require heavy use of JavaScript to generate content on the fly. The user needn&rsquo;t wait between requests and page refreshes. A lot of the logic/code that used to be on the server side is being moved to the client side. JS allows web sites to render only content that changes without needing to reload the full-page on every request. Examples of this kind of web applicqtion are Gmail, Pandora, Pinterest, Nokia Maps 3D and others.</p>

<p>A common problem with large JS web application developed is that they can become pretty messy really quickly. The lack of structure makes the code hard to maintain. This is where Backbone comes into play. It provides structure to organize the code and increase maintainability. Backbone is not the only framework like this; in fact, there are many JS frameworks that attempt to offer similar benefits, like Ember.js, Angular.js and so on. However, I choose Backbone because it&rsquo;s one of the most widely used frameworks in its category. It has a vibrant community and it’s also being fully used in production for a considerable number of big companies like: Wal-Mart mobile, Groupon, Khan Academy, Pandora, Wordpress, Foursquare, and so on.</p>

<p><a id="start"></a></p>

<h1>BackboneJS</h1>

<h2>Just enough to get started with Backbone.js</h2>

<p>Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It’s made up of the following modules:</p>

<ul>
<li> Views</li>
<li> Events</li>
<li> Models</li>
<li> Collections</li>
<li> Routers</li>
</ul>


<h2>Shut up and show me the code!</h2>

<p>Alright! the way we are going to explore all of these modules is through examples. This is a practical tutorial that I wished I had it when I stared learning. This is a fat-free walkthrough of Backbone.js, as simple as possible, with all the code in one file for didactical purposes (no hidden magic tricks, all cards are on the table).</p>

<p>The first example is a ‘Hello World’ app in Backbone and the second is a &lsquo;to do&rsquo; app. After working through these two example apps, you’ll see every Backbone module and have a practical understanding about them.</p>

<h2>1. Hello World in Backbone.js</h2>

<p>You can follow along with this tutorial&rsquo;s code in this <a href="https://github.com/amejiarosario/Backbone-tutorial/commits/">repository</a>. Each feature implemented is a new commit, so you can easily see what changed in every step.</p>

<p><strong>1.1.- Simple HTML5 and Backbone boilerplate</strong></p>

<p>To get started, download <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html">this simple html file</a>. This file  contains the libraries that you&rsquo;ll need (jQuery, Underscore.js, Backbone.js and Backbone-localStorage.js) and the placeholders for your HTML and JS code. Don&rsquo;t worry about the libraries, we are going to explain them as we need them.</p>

<p>After downloading the aformentioned file, notice the HTML where your entire page will be built using Backbone.Views!</p>

<p>Your entire js app will be loaded here:</p>

<p><code>&lt;div id="container"&gt;Loading...&lt;/div&gt;</code></p>

<p><a id="1.2"></a>
<strong>1.2.- Backbone&rsquo;s Views</strong></p>

<p>Backbone&rsquo;s Views are the equivalent of ‘controllers’ on MVC frameworks (like Ruby on Rails), if you are not familiar with MVC frameworks, that&rsquo;s okay. Backbone&rsquo;s Views glue together user events (clicks, pressed keys, etc.), render HTML views and templates, and interact with models which contains the data of the application.</p>

<p>Here is an example of a Backbone.view: READ THE CODE AND COMMENTS, then insert this code in the javascript block of the HTML file you downloaded.</p>

<p><figure class='code'><figcaption><span>Simple Backbone.View <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="c1">// el - stands for element. Every view has a element associate in with HTML</span>
</span><span class='line'>      <span class="c1">//      content will be rendered.</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>      <span class="c1">// It&amp;rsquo;s the first function called when this view it&amp;rsquo;s instantiated.</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">// $el - it&amp;rsquo;s a cached jQuery object (el), in which you can use jQuery functions</span>
</span><span class='line'>      <span class="c1">//       to push content. Like the Hello World in this case.</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>1.3.- Test the app</strong></p>

<p>After copying the code, open the file, refresh the browser and you should see the &lsquo;Hello World&rsquo; message, right? Wait, if you&rsquo;re just seeing the &lsquo;Loading…&rsquo; it&rsquo;s because you need to initialize the view first.</p>

<p><code>var appView = new AppView();</code></p>

<p>Yay! You have your &ldquo;Hello Wold&rdquo; in Backbone and an introduction to the View module. (Full code is <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">here</a>)</p>

<p><strong>1.4.- Backbone&rsquo;s Templates</strong></p>

<p>Backbone has a utility/helper library called <a href="http://underscorejs.org/?utm_source=adrianmejia.com">underscore.js</a> and you can use their template solution out of box. You can also use any other template solution that you want like <a href="https://github.com/janl/mustache.js">mustache</a> or <a href="https://github.com/wycats/handlebars.js">handlebars</a>. Let&rsquo;s stick with _.js for simplicity&rsquo;s sake.</p>

<p>_.js templates have the following syntax,</p>

<p><code>_.template(templateString, [data], [settings])</code></p>

<p>where in the <code>templateString</code> you use the place holder <code>&lt;%= %&gt;</code> and <code>&lt;%- %&gt;</code> to dynamically insert data. The later allows for HTML escape while the first one doesn&rsquo;t. Moreover, you can use <code>&lt;% %&gt;</code> to run any javascript code.</p>

<p>Let’s see it in action and rewrite our &ldquo;Hello World&rdquo; using a _.js template instead.</p>

<p><figure class='code'><figcaption><span>Simple Backbone.View and Templates <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html">https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html</a> Full Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">container</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;),</span>
</span><span class='line'>      <span class="c1">// template which has the placeholder &amp;lsquo;who&amp;rsquo; to be substitute later</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%=</span> <span class="nx">who</span> <span class="o">%&gt;&lt;</span><span class="err">/h3&gt;&amp;rdquo;),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// render the function using substituting the varible &amp;lsquo;who&amp;rsquo; for &amp;lsquo;world!&amp;rsquo;.</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">who</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">world</span><span class="o">!&amp;</span><span class="nx">rsquo</span><span class="p">;}));</span>
</span><span class='line'>        <span class="c1">//***Try putting your name instead of world.</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">appView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AppView</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Run the app again and verify that it&rsquo;s working with the template.</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">2nd part</a> and learn more about Backbone&rsquo;s Models, Collections, View and Events!</h3>
]]></content>
  </entry>
  
</feed>
