<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Adrian Mejia's Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2014-10-03T19:55:15-04:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MEAN Stack Tutorial MongoDB ExpressJS AngularJS NodeJS (Part III)]]></title>
    <link href="http://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/"/>
    <updated>2014-10-03T06:59:34-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs</id>
    <content type="html"><![CDATA[<p>This is the last part of three serial tutorials.</p>

<p>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" ></p>

<p>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></p>

<p><img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<p><strong>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a></strong></p>

<p><img src="/images/MEAN_jarroba.png" title="MEAN Stack" ></p>

<h1>Part III: MEAN Stack: Wiring all together</h1>

<h2>Brief Background</h2>

<p><img src="/images/lamp_vs_mean.jpg">
<small>(Image from backand.com)</small></p>

<p>LAMP (Linux-Apache-MySQL-PHP) has dominated web application stack for many years now. Well-known platforms such as Wikipedia, Wordpress, and even Facebook uses it or started with it. Enterprise, usually, used go down the Java path: Hibernate, Spring, Struts, JBoss. More agile frameworks also have been widely used such as Ruby on Rails and for Python Django and Pylon.</p>

<p>Why MEAN stack then?</p>

<p><strong>Ubiquitous</strong></p>

<p>Well, it turns out, that JavaScript it is everywhere: smartphones, computers, in the browser, in the server, robotics, Arduino, RaspberryPi and growing. Thus, it does not matter what technology of stack you use to build web applications you need to be familiar with Javascript. In that case then, it is a time saver to use wherever it fits, especially for building web applications. MEAN stack is embracing that, using Javascript to create end-to-end web applications.</p>

<p><strong>Non-blocking architecture</strong></p>

<p>JavaScript is a dynamic, object-oriented, and functional scripting language. One of the features that make it win over Java Applets in the browser scripting war decades ago, it was its lightness and non-blocking event loop.
Bocking means that when one line of code is executing the rest of it is locked waiting to finish. On the other hand, non-blocking gives to each line of code a shot and then through callbacks it can come back when an event happens.
Programming languages that are blocking (Java, Ruby, Python, PHP, &hellip;) overcomes concurrency using multiple threads of execution while JavaScript handles it using non-blocking event loop in a single thread.</p>

<p><img src="/images/threading_java.png" title="" >
<img src="/images/threading_node.png">
<small>Image from strongloop.com</small></p>

<p>Some companies like <a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/">Paypal</a> moved from Java backend to NodeJS and reported a increased performance, lower average response times, and development speed gains.  Similarly happens to <a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/">Groupon</a> that came from Java/Rails monoliths.</p>

<p><strong>Agile and vibrant community</strong></p>

<p>The community behind Javascript is quite vibrant and has permeated in almost all the fields of technology: data visualization, client-side frameworks, server-side frameworks, databases, robotics, building tools and many more.</p>

<h1>Setup</h1>

<h2>MEN for MongoDB, ExpressJS and NodeJS</h2>

<p>In the <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">previous post</a>, we have gone through the process of building a RESTful API and we are going to be building on top of that. <a href="https://github.com/amejiarosario/todoAPIjs">Repository here</a>.</p>

<pre><code class="bash Getting the back-end code build on Part II">git clone https://github.com/amejiarosario/todoAPIjs.git
</code></pre>

<h2>A for AngularJS</h2>

<p>Similarly, we have build a very lean todoApp in the <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">first part</a> of this tutorial. You can <a href="https://gist.githubusercontent.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">download the file</a> to follow along and see it in action <a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">here</a></p>

<p>Let&rsquo;s go first to the ExpressJS app (todoAPIjs) and review the default routing system:</p>

<ol>
<li><code>app.js</code> loads the all the routes.</li>
<li>The root path (<code>/</code>) is mounted on the <code>routes/index.js</code></li>
<li><code>routes/index.js</code> sets the variable title and renders <code>index.ejs</code>.</li>
</ol>


<pre><code class="javascript Tracing ExpressJS index route">// app.js
var routes = require('./routes/index');
app.use('/', routes);

// ./routes/index.js
router.get('/', function(req, res) {
  res.render('index', { title: 'Express' });
});

// ./views/index.ejs
    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;
</code></pre>

<p>The best place to load our <code>./views/index.ejs</code>. So let&rsquo;s copy the body content from ngTodo.html content in there and change in <code>./routes/index.js</code> title to &ldquo;ngTodo App&rdquo;. Don&rsquo;t forget to add ng-app on the top. <code>&lt;html ng-app="app"&gt;</code>.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/ebf20f4093aa20c867777b4b3db825429b54a20d">diff</a></p>

<h1>Wiring it together</h1>

<h2>AngularJS CRUD</h2>

<h3>AngularJS Read with $http</h3>

<p>As you might notice, in the factory, we have a fixed array. We need to change it to communicate with the API that we just build.</p>

<p><code>$http</code> is Anguar core sevice that allow to make <code>XMLHttpRequest</code> or <code>jsonp</code> request. You can either pass an object with http verb and url or call call $http.verb (<code>$http.get</code>, <code>$http.post</code>).</p>

<p><code>$http</code> returns a promise which has a <code>success</code> and <code>error</code> function.</p>

<pre><code class="javascript AngularJS $HTTP Usage Example">$http({method: 'GET', url: '/todos'}).
  success(function(data, status, headers, config) {
    // this callback will be called asynchronously
    // when the response is available.
    console.log('todos: ', data );
  }).
  error(function(data, status, headers, config) {
    // called asynchronously if an error occurs
    // or server returns response with an error status.
    console.log('Oops and error', data);
  });
</code></pre>

<p>Let&rsquo;s try it out in our app. Go to <code>views/index.ejs</code> and do this changes:</p>

<pre><code class="javascript Using $http to retrieve data from database">        // Service
        .factory('Todos', ['$http', function($http){
          return $http.get('/todos');
        }])

        // Controller
        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          Todos.success(function(data){
            $scope.todos = data;
          }).error(function(data, status){
            console.log(data, status);
            $scope.todos = [];
          });
        }])
</code></pre>

<p>If you have data in MongoDB you see them listed in the main page. If you not you can follow the steps in <a href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/#browser-and-postman">here</a> to get some in.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/0221aebd62e88445629debe4f132684686cf48ec">diff</a></p>

<h3>AngularJS Read with $resource</h3>

<p>If you click in one of the Todo elements and get redirected to the detail page, you will not see anything yet. We need to update the <code>TodoDetailCtrl</code> first. Even though, we already have the GET verb working, we have a slightly different URL requirement for <code>/todos/:id</code>. There’s an Angular service that has a higher level of abstraction to deal with RESTful requests: <code>$resource</code>.</p>

<p>Initialize as:
<code>$resource(url, [paramDefaults], [actions], options);</code></p>

<p>It comes with the following actions already defined; it is missing one though… Can you tell?</p>

<pre><code class="javascript $resource actions">{ 'get':    {method:'GET'},  // get individual record
  'save':   {method:'POST'}, // create record
  'query':  {method:'GET', isArray:true}, // get list all records
  'remove': {method:'DELETE'}, // remove record
  'delete': {method:'DELETE'} }; // same, remove record
</code></pre>

<p>The instances are used in the following way (examples will come later):</p>

<ul>
<li>GET: <code>Resource.get([parameters], [success], [error])</code></li>
<li>Non-GET: <code>Resource.action([parameters], postData, [success], [error])</code></li>
<li>Non-GET: <code>resourceInstance.$action([parameters], [success], [error])</code></li>
</ul>


<p><code>$resource</code> is not part of the Angular core, so it requires to <code>ngResource</code> and the dependency. We can get it from the CDN:</p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-resource.min.js"&gt;&lt;/script&gt;</code></p>

<p>This is what need to set it up:</p>

<pre><code class="Javascript $resource.query()">  // add ngResource dependency
  angular.module('app', ['ngRoute', 'ngResource'])

        .factory('Todos', ['$resource', function($resource){
          return $resource('/todos/:id', null, {
            'update': { method:'PUT' }
          });
        }])

        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.todos = Todos.query();
        }])        
</code></pre>

<p>Notice that <code>$resource</code> does not return a promise like <code>$http</code> but an empty reference instead. Angular will render an empty <code>$scope.todos</code>, however, when <code>Todos.query()</code> comes with the data from the server it will re-render the UI automatically.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2aff6fe004bf7f7b2cd1b91d53e6958c3b158a20">diff</a></p>

<h3>AngularJS Create</h3>

<p>We will need to create a new text box, a button to send a <code>POST</code> request to server and add it to the <code>$scope</code>.</p>

<pre><code class="html New textbox for adding Todos">New task &lt;input type="text" ng-model="newTodo"&gt;&lt;button ng-click="save()"&gt;Create&lt;/button&gt;
</code></pre>

<p>Notice that we are using a new directive <code>ng-click</code>, this one executes a function when it clicked. Angular makes sure that the behaviour is consistent across different browsers.</p>

<pre><code class="javascript Save function $resource.$save(...)">        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.todos = Todos.query();

          $scope.save = function(){
            if(!$scope.newTodo || $scope.newTodo.length &lt; 1) return;
            var todo = new Todos({ name: $scope.newTodo, completed: false });

            todo.$save(function(){
              $scope.todos.push(todo);
              $scope.newTodo = ''; // clear textbox
            });
          }
        }])
</code></pre>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/46dd14023e2d9eff72d1366dbba9c9c8c872e07b">diff</a></p>

<h3>Show Todo details</h3>

<p>Every time you click a todo link, it is showing an empty fields. Let&rsquo;s fix that. First we need set the real <code>_id</code> to the links instead of <code>$index</code>.</p>

<pre><code class="html Change the ID link in the "/todos.html" template">        &lt;li ng-repeat="todo in todos | filter: search"&gt;
          &lt;input type="checkbox" ng-model="todo.completed"&gt;
          &lt;a href="#/"&gt;&lt;/a&gt;
        &lt;/li&gt;
</code></pre>

<pre><code class="javascript Update TodoDetailCtrl with $resource.get">        .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', function ($scope, $routeParams, Todos) {
          $scope.todo = Todos.get({id: $routeParams.id });
        }])
</code></pre>

<p>Now you should be able to see the details :)</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2484107294163a25621fba3785601adb32229ae9">diff</a></p>

<h3>AngularJS Update (in-line editing)</h3>

<p>This is going to be a very cool feature. Meet these new directives:</p>

<ul>
<li><p><strong>ng-show</strong>: is directive that shows the element in which it is declared if attribute is true or hide it when the attribute become false.</p></li>
<li><p><strong>ng-change</strong>: directive for input elements that evaluates the expression after any change.</p></li>
</ul>


<pre><code class="html  Template todos.html">    &lt;!-- Template --&gt;
    &lt;script type="text/ng-template" id="/todos.html"&gt;
      Search: &lt;input type="text" ng-model="search.name"&gt;
      &lt;ul&gt;
        &lt;li ng-repeat="todo in todos | filter: search"&gt;
          &lt;input type="checkbox" ng-model="todo.completed" ng-change="update($index)"&gt;
          &lt;a ng-show="!editing[$index]" href="#/"&gt;&lt;/a&gt;
          &lt;button ng-show="!editing[$index]" ng-click="edit($index)"&gt;edit&lt;/button&gt;

          &lt;input ng-show="editing[$index]" type="text" ng-model="todo.name"&gt;
          &lt;button ng-show="editing[$index]" ng-click="update($index)"&gt;Update&lt;/button&gt;
          &lt;button ng-show="editing[$index]" ng-click="cancel($index)"&gt;Cancel&lt;/button&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      New task &lt;input type="text" ng-model="newTodo"&gt;&lt;button ng-click="save()"&gt;Create&lt;/button&gt;
    &lt;/script&gt;
</code></pre>

<p>We added a new variable <code>$scope.editing</code> which shows or hides the form to edit the values. Furthermore, notice ng-click functions: edit, update and cancel. Let&rsquo;s see what they do.</p>

<pre><code class="javascript Todo Controller">        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.editing = [];
          $scope.todos = Todos.query();

          $scope.save = function(){
            if(!$scope.newTodo || $scope.newTodo.length &lt; 1) return;
            var todo = new Todos({ name: $scope.newTodo, completed: false });

            todo.$save(function(){
              $scope.todos.push(todo);
              $scope.newTodo = ''; // clear textbox
            });
          }

          $scope.update = function(index){
            var todo = $scope.todos[index];
            Todos.update({id: todo._id}, todo);
            $scope.editing[index] = false;
          }

          $scope.edit = function(index){
            $scope.editing[index] = angular.copy($scope.todos[index]);
          }

          $scope.cancel = function(index){
            $scope.todos[index] = angular.copy($scope.editing[index]);
            $scope.editing[index] = false;
          }
        }])
</code></pre>

<p>While were are editing notice that we copy the original todo task into the editing variable. This server for two purposes: (1) it evaluates to <code>true</code> and show the forms with <code>ng-show</code> and (2) it holds a copy of the original value in case we press cancel.</p>

<p>Now, going to the Todo Details. We would like that to be updated as well and add notes.</p>

<pre><code class="html Todo Details">    &lt;script type="text/ng-template" id="/todoDetails.html"&gt;
      &lt;h1&gt;&lt;/h1&gt;
      completed: &lt;input type="checkbox" ng-model="todo.completed"&gt;&lt;br&gt;
      note: &lt;textarea ng-model="todo.note"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;

      &lt;button ng-click="update()"&gt;Update&lt;/button&gt;
      &lt;a href="http://adrianmejia.com/"&gt;Cancel&lt;/a&gt;
    &lt;/script&gt;
</code></pre>

<p>Similarly, we added an update method. However, this time we do not need to pass any index, since it is just one todo at a time. After it has been saved, it goes back to root path <code>/</code>.</p>

<pre><code>        .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', '$location', function ($scope, $routeParams, Todos, $location) {
          $scope.todo = Todos.get({id: $routeParams.id });

          $scope.update = function(){
            Todos.update({id: $scope.todo._id}, $scope.todo, function(){
              $location.url('/');
            });
          }
        }])
</code></pre>

<ul>
<li><code>$location.url([url])</code> is a getter/setter method that allows us to change url, thus routing/view.</li>
</ul>


<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b6394448e1e1e8384815877df764507d6562dc4d">diff</a></p>

<h3>AngularJS Delete</h3>

<p>These are the changes added to implement the remove functionality. Pretty straight forward. Notice when we remove elements from the todos array <code>$scope.todos.splice(index, 1)</code> they also disappear from the DOM. Very cool, huh?</p>

<pre><code class="diff Delete functionality (diff)">diff --git a/views/index.ejs b/views/index.ejs
index 9c3ef46..afb37e1 100644
--- a/views/index.ejs
+++ b/views/index.ejs
@@ -22,6 +22,7 @@
           &lt;input type="checkbox" ng-model="todo.completed" ng-change="update($index)"&gt;
           &lt;a ng-show="!editing[$index]" href="#/"&gt;&lt;/a&gt;
           &lt;button ng-show="!editing[$index]" ng-click="edit($index)"&gt;edit&lt;/button&gt;
+          &lt;button ng-show="!editing[$index]" ng-click="remove($index)"&gt;remove&lt;/button&gt;

           &lt;input ng-show="editing[$index]" type="text" ng-model="todo.name"&gt;
           &lt;button ng-show="editing[$index]" ng-click="update($index)"&gt;update&lt;/button&gt;
@@ -37,6 +38,7 @@
       note: &lt;textarea ng-model="todo.note"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;

       &lt;button ng-click="update()"&gt;update&lt;/button&gt;
+      &lt;button ng-click="remove()"&gt;remove&lt;/button&gt;
       &lt;a href="http://adrianmejia.com/"&gt;Cancel&lt;/a&gt;
     &lt;/script&gt;

@@ -85,6 +87,13 @@
             $scope.todos[index] = angular.copy($scope.editing[index]);
             $scope.editing[index] = false;
           }
+
+          $scope.remove = function(index){
+            var todo = $scope.todos[index];
+            Todos.remove({id: todo._id}, function(){
+              $scope.todos.splice(index, 1);
+            });
+          }
         }])

         .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', '$location', function ($scope, $routeParams, Todos, $location) {
@@ -95,6 +104,12 @@
               $location.url('/');
             });
           }
+
+          $scope.remove = function(){
+            Todos.remove({id: $scope.todo._id}, function(){
+              $location.url('/');
+            });
+          }
         }])

         //---------------
</code></pre>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b9ff3a863c78d72e71b5cc9eb573bb3cb9d87179">diff</a></p>

<p><strong>Congratulations! You are now a MEAN developer!</strong></p>

<h1>Full-Stack Javascript Web Frameworks</h1>

<p>What we did in these three series tutorial could have been done with just few keystrokes in the comamnd line ;). However, it&rsquo;s good to know what&rsquo;s going on. But at this point you do. So, I will introduce you to some frameworks that can save you a lot of time.</p>

<h2>Using MEAN.io</h2>

<p>MeanIO uses a customized CLI tool: ‘mean’. Its approach for modularity is leaned towards self-contained packages that have code for both client and server files. At moment of writing this, it has nine packages ranging from MEAN-Admin, Translation, file uploads, image crop and more.</p>

<h2>Using MEAN.js</h2>

<p>MeanJS it is a fork from the creator of MEAN.IO, it uses Yeoman generators to generate Angular’s CRUD modules, routes, controllers, views, services, and more. Also has generators for Express: models, controllers, routes and tests. It has excellent documentation.</p>

<h2>Others Frameworks to look at</h2>

<ul>
<li><a href="https://www.meteor.com/">Meteor</a> - Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you&rsquo;re an expert developer or just getting started.</li>
<li><a href="http://meanjs.org/">MeanJS</a> - Open-Source Full-Stack Solution For MEAN Applications.</li>
<li><a href="http://mean.io">MeanIO</a> - The Friendly &amp; Fun Javascript Fullstack
for your next web application.</li>
<li><a href="http://derbyjs.com/">Derby</a> - Expect more from your MVC. DerbyJS is a full-stack framework for writing modern web applications.</li>
<li><a href="http://towerjs.org">Tower.js</a> - Small components for building apps, manipulating data, and automating a distributed infrastructure.</li>
<li><a href="http://socketcluster.io/">SocketCluster</a> - Supercharge your webserver with SocketCluster’s highly parallalized architecture.</li>
<li><a href="http://geddyjs.org">Geddy</a> - A simple, structured web framework for Node.</li>
<li><a href="http://compoundjs.com/">Compound</a> - Compound&rsquo;s formula is Express + structure + extensions.</li>
<li><a href="https://developer.yahoo.com/cocktails/mojito/">Yahoo! Mojito</a> - A JavaScript MVC framework for mobile applications, one of the Yahoo! Cocktails.</li>
<li><a href="http://sailsjs.org/">Sails</a> - The web framework of your dreams.</li>
<li><a href="http://wakanda.org">Wakanda</a> - Bridge the gap between business and IT</li>
<li><a href="http://opalang.org">Opa</a> - Rapid &amp; Secure Web Development</li>
<li><a href="http://www.deployd.com/">Deployd</a> - Design, build, and scale APIs for web and mobile apps in minutes instead of days.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating RESTful APIs With NodeJS and MongoDB Tutorial (Part II)]]></title>
    <link href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/"/>
    <updated>2014-10-01T17:26:42-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb</id>
    <content type="html"><![CDATA[<p>Welcome to this RESTful API using Node.js (Express.js) and MongoDB (mongoose) tutorial. You can follow alone to make a stand alone API endpoint, or you could also check out our <a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb" target="_blank">AngularJS</a> or <a href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started" target="_blank">BackboneJS</a> tutorials to build the front-end that connects with this backend.</p>

<p>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" ></p>

<p><strong>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></strong></p>

<p><img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<p>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a></p>

<p><img src="/images/MEAN_jarroba.png" title="MEAN Stack" ></p>

<h1>Part II: Creating RESTful APIs with NodeJS and MongoDB Tutorial by Examples</h1>

<h2>What RESTful API really means?</h2>

<p>REST stands for Representational State Transfer. It is an architecture that allows <code>client-server</code> communication through a uniform interface. They are also <code>stateless</code>, <code>cachable</code> and has property called <code>idempotence</code>, which means that the side effect of multiple identical requests have the same effect as the same single request.</p>

<p>HTTP RESTful API&rsquo;s are compose of:</p>

<ul>
<li>Base URI, e.g. <code>http://adrianmejia.com</code></li>
<li>Media type, e.g. html, JSON, XML, Microformats, Atom, Images&hellip;</li>
<li>HTTP methods, e.g. GET, PUT, DELETE, PATCH, POST, &hellip;</li>
</ul>


<p>Here&rsquo;s is a summary what we want to implement:</p>

<table>
<thead>
<tr>
<th> Resource (URI)  </th>
<th>  POST (create) </th>
<th> GET (read)  </th>
<th> PUT (update)  </th>
<th> DELETE (destroy)  </th>
</tr>
</thead>
<tbody>
<tr>
<td> /todos  </td>
<td> create new task  </td>
<td> list tasks  </td>
<td> N/A (update all)  </td>
<td>  N/A (destroy all) </td>
</tr>
<tr>
<td> /todos/1  </td>
<td>  error  </td>
<td> show task ID 1  </td>
<td> update task ID 1  </td>
<td>  destroy task ID 1 </td>
</tr>
</tbody>
</table>


<p><strong>NOTE</strong>: Format will be JSON.</p>

<p><strong>NOTE1</strong>: Bulk updates and bulk destroys are not safe, so we will not be implementing those.</p>

<p><strong>NOTE2</strong>: POST, GET, PUT, DELETE == <strong>C</strong>REATE, <strong>R</strong>EAD, <strong>U</strong>PDATE, <strong>D</strong>ELETE == <strong>CRUD</strong>.</p>

<h1>Setup</h1>

<p>The two main components of the MEAN stack are&hellip; NodeJS and MongoDB.</p>

<p><img src="/images/node-js-mongodb.png" title="NodeJS and MongoDB" ></p>

<p>Note: If already have installed NodeJS, MongoDB (Mongoose), ExpressJS and knows about them separately then you can jump to <a href="#wiring-up-the-mean-stack">wiring the stack</a>, which is where the hands on start. Otherwise, if you want to review/learn about each member of the stack then follow alone and enjoy the ride!</p>

<h2>NodeJS</h2>

<p>For short NodeJS is Javascript running outside the browser, in this case in the server.</p>

<p>To install it, you can go to <a href="http://nodejs.org/" target="_blank">NodeJS Website</a>. But if you are using Mac and <a href="http://brew.sh" target="_blank">brew</a> you can do <code>brew install nodejs</code> and in ubuntu use <a href="https://github.com/creationix/nvm">nvm</a> to install it. Once you have continue.</p>

<p>Check node version and npm (node package manager) version:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node -v&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; v0.10.30&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;npm -v&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 2.0.0-alpha-5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">## ExpressJS</span>
</span><span class='line'>
</span><span class='line'>ExpressJS is web application framework that runs on NodeJS. Allows you to build web applications and APIs endpoints. <span class="o">(</span>mode details later<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>Install it using npm:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;npm install -g express
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice <code>-g</code>. It will install <code>express</code> globally and add it the <code>PATH</code>, so you can run it from anywhere.</p>

<p>Check version:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>express -V&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 4.9.0&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">## MongoDB</span>
</span><span class='line'>
</span><span class='line'>MongoDB is a document-oriented NoSQL database <span class="o">(</span>Big Data ready<span class="o">)</span>. It stores data in JSON-like format and allows to perform SQL-like queries against it.
</span><span class='line'>
</span><span class='line'>You can installed following the <span class="p">&amp;</span>lt<span class="p">;</span>a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://docs.mongodb.org/manual/installation/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="p">&amp;</span>gt<span class="p">;</span>instructions here<span class="p">&amp;</span>lt<span class="p">;</span>/a<span class="p">&amp;</span>gt<span class="p">;</span>. If you have a Mac and <span class="p">&amp;</span>lt<span class="p">;</span>a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://brew.sh/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="p">&amp;</span>gt<span class="p">;</span>brew<span class="p">&amp;</span>lt<span class="p">;</span>/a<span class="p">&amp;</span>gt<span class="p">;</span> it<span class="err">&#39;</span>s just: <span class="sb">`</span>brew install mongodb <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> mongod<span class="sb">`</span>. In ubuntu <span class="sb">`</span>sudo apt-get -y install mongodb<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'>Check version:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Mac&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mongod <span class="p">&amp;</span>ndash<span class="p">;</span>version&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; db version v2.6.4&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 2014-10-01T19:07:26.649-0400 git version: nogitversion&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Ubuntu&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mongod <span class="p">&amp;</span>ndash<span class="p">;</span>version&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; db version v2.0.4, pdfile version 4.5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Wed Oct  <span class="m">1</span> 23:06:54 git version: nogitversion&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c"># Understanding the MEAN Stack</span>
</span><span class='line'>
</span><span class='line'>If follow the previous steps you should have all you need to <span class="nb">complete </span>this tutorial. Basically, we are going to build an API that allow users to CRUD <span class="o">(</span>Create-Read-Update-Delete<span class="o">)</span> Todo tasks from database.
</span><span class='line'>
</span><span class='line'><span class="c">## Mongoose CRUD</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CRUD</span> <span class="o">=</span> **C**reate-**R**ead-**U**pdate-**D**elete
</span><span class='line'>
</span><span class='line'>We can play with Mongoose in the console. In the <span class="sb">`</span>todoApp<span class="sb">`</span> <span class="nb">type</span> <span class="sb">`</span>node<span class="sb">`</span> to enter in the node CLI. Then:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">mongoose</span> <span class="o">=</span> require<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>mongoose<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ mongoose.connect<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>mongodb://localhost/test3<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">TodoSchema</span> <span class="o">=</span> new mongoose.Schema<span class="o">({</span>
</span><span class='line'>  name: String,
</span><span class='line'>  completed: Boolean,
</span><span class='line'>  note: String,
</span><span class='line'>  updated_at: <span class="o">{</span> <span class="nb">type</span>: Date, default: Date.now <span class="o">}</span>,
</span><span class='line'><span class="o">})</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">Todo</span> <span class="o">=</span> mongoose.model<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Todo<span class="p">&amp;</span>rsquo<span class="p">;</span>, TodoSchema<span class="o">)</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'><span class="c">### Mongoose Create</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ var <span class="nv">todo</span> <span class="o">=</span> new Todo<span class="o">({</span>name: <span class="p">&amp;</span>lsquo<span class="p">;</span>Master NodeJS<span class="p">&amp;</span>rsquo<span class="p">;</span>, completed: <span class="nb">false</span>, note: <span class="p">&amp;</span>lsquo<span class="p">;</span>Getting there<span class="p">&amp;</span>hellip<span class="p">;&amp;</span>rsquo<span class="p">;</span><span class="o">})</span><span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt; prompt&gt; &lt;/em&gt;/ todo.save<span class="o">(</span><span class="k">function</span><span class="o">(</span>err<span class="o">){</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span>err<span class="o">)</span>
</span><span class='line'>        console.log<span class="o">(</span>err<span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        console.log<span class="o">(</span>todo<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also build the object and save in one step using <code>create</code>:</p>

<pre><code class="javascript">/* prompt&gt; */ Todo.create({name: 'Master Javscript', completed: true, note: 'Getting better everyday'}, function(err, todo){
    if(err) console.log(err);
    else console.log(todo);
});
</code></pre>

<h3>Mongoose Read and Query</h3>

<p>There are multiple options for reading/querying data:</p>

<ul>
<li>Model.find(conditions, [fields], [options], [callback])</li>
<li>Model.findById(id, [fields], [options], [callback])</li>
<li>Model.findOne(conditions, [fields], [options], [callback])</li>
</ul>


<p>Some examples:</p>

<pre><code class="javascript Find all">/* prompt&gt; */ Todo.find(function (err, todos) {
  if (err) return console.error(err);
  console.log(todos)
});
</code></pre>

<p>You can also add queries</p>

<pre><code class="javascript Find with queries">/* prompt&gt; */ var callback = function (err, data) {
  if (err) return console.error(err);
  else console.log(data);
}

// Get all completed tasks
/* prompt&gt; */ Todo.find({completed: true }, callback);

// Get all tasks ending with `JS`
/* prompt&gt; */ Todo.find({name: /JS$/ }, callback);
</code></pre>

<p>You can chain multiple queries, e.g.:</p>

<pre><code class="javascript Chaining queries">/* prompt&gt; */ var oneYearAgo = new Date();
oneYearAgo.setYear(oneYearAgo.getFullYear() - 1);

// Get all tasks staring with `Master`, completed
/* prompt&gt; */ Todo.find({name: /^Master/, completed: true }, callback);

// Get all tasks staring with `Master`, not completed and created from year ago to now...
/* prompt&gt; */ Todo.find({name: /^Master/, completed: false }).where('updated_at').gt(oneYearAgo).exec(callback);
</code></pre>

<h3>Mongoose Update</h3>

<p>Each model has an <code>update</code> method which accepts multiple updates (for batch updates because doesn’t return an array with data). Alternatively, the method <code>findOneAndUpdate</code> could be used to update just one and return an object.</p>

<ul>
<li>Model.update(conditions, update, [options], [callback])</li>
<li>Model.findByIdAndUpdate(id, [update], [options], [callback])</li>
<li>Model.findOneAndUpdate([conditions], [update], [options], [callback])</li>
</ul>


<pre><code class="javascript Todo.update and Todo.findOneAndUpdate">
// Model.update(conditions, update, [options], [callback])
// update `multi`ple tasks from complete false to true

/* prompt&gt; */ Todo.update({ completed: false }, { completed: true }, { multi: true }, function (err, numberAffected, raw) {
  if (err) return handleError(err);
  console.log('The number of updated documents was %d', numberAffected);
  console.log('The raw response from Mongo was ', raw);
});

//Model.findOneAndUpdate([conditions], [update], [options], [callback])
/* prompt&gt; */ Todo.findOneAndUpdate({name: /JS$/ }, {completed: false}, callback);
</code></pre>

<h3>Mongoose Delete</h3>

<p><code>update</code> and <code>remove</code> mongoose API are identical, the only difference it is that no elements are returned.</p>

<ul>
<li>Model.remove(conditions, [callback])</li>
<li>Model.findByIdAndRemove(id, [options], [callback])</li>
<li>Model.findOneAndRemove(conditions, [options], [callback])</li>
</ul>


<h2>ExpressJS and Middlewares</h2>

<p>ExpressJS is a complete web framework solution. It has HTML template solutions (jade, ejs, handlebars, hogan.js) and CSS precompilers (less, stylus, compass). Through middlewares layers, it handles: cookies, sessions, caching, CSRF, compression and many more.</p>

<p><strong>Middlewares</strong> are a stack of processors that runs on each request made to the server. You can have any number of middlewares that will process the request one by one in a serial fashion. Some might alter the request input, log outputs, add data and pass it to the <code>next()</code> middleware in the chain.</p>

<p>Middlewares are added to ExpressJS stack using <code>app.use</code> for any method or the app.VERB (e.g., <code>app.get</code>, <code>app.delete</code>, <code>app.post</code>, <code>app.update</code>, &hellip;)</p>

<p><img src="/images/express-middlewares.png" title="ExpressJS Middlewares" ></p>

<p>Let&rsquo;s say you want to log the IP of the client on each request:</p>

<pre><code class="javascript Log the client IP on every request">app.use(function (req, res, next) {
  var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  console.log('Client IP:', ip);
  next();
});
</code></pre>

<p>You can also specify a path that you want the middleware to activate on.</p>

<pre><code class="javascript Middleware mounted on "/todos/:id" and log the request method">app.use('/todos/:id', function (req, res, next) {
  console.log('Request Type:', req.method);
  next();
});
</code></pre>

<p>And finally you can use <code>app.get</code> to catch GET request with maching route, reply the request with a <code>response.send</code> and end the middleware chain. Let&rsquo;s use what we learned on <a href="#mongoose-read-and-query">mongoose read</a> to reply with a user data matching the <code>id</code>.</p>

<pre><code class="javascript Middleware mounted on "/todos/:id" and returns ">app.get('/todos/:id', function (req, res, next) {
  Todo.findById(req.params.id, function(err, todo){
    if(err) res.send(err);
    res.json(todo);
  });
});
</code></pre>

<p>Notice that all previous middlewares called <code>next()</code> except this last one, because it sends a respond (in JSON) to the client with the requeste <code>todo</code> data.</p>

<p>Hopefully, you don&rsquo;t have to develop a bunch of middlewares besides routes, since ExpressJS has a bunch of middlewares available.</p>

<h3>Default Express 4.0 middlewares</h3>

<ul>
<li><p><a href="https://github.com/expressjs/morgan" target="_blank">morgan</a>: logger</p></li>
<li><p><a href="https://github.com/expressjs/body-parser" target="_blank">body-parser</a>: parse the body so you can access parameters in requests in <code>req.body</code>. e.g. <code>req.body.name</code>.</p></li>
<li><p><a href="https://github.com/expressjs/cookie-parser" target="_blank">cookie-parser</a>: parse the cookies so you can access parameters in cookies <code>req.cookies</code>. e.g. <code>req.cookies.name</code>.</p></li>
<li><p><a href="https://github.com/expressjs/serve-favicon" target="_blank">serve-favicon</a>: exactly that, serve favicon from route <code>/favicon.ico</code>. Should be call on the top before any other routing/middleware takes place to avoids unnecessary parsing.</p></li>
</ul>


<h3>Other ExpressJS Middlewares</h3>

<p>The following middlewares are not added by default, but It&rsquo;s nice to know they exist at least:</p>

<ul>
<li><p><a href="https://github.com/expressjs/compression" target="_blank">compression</a>: compress all request. e.g. <code>app.use(compression())</code></p></li>
<li><p><a href="https://github.com/expressjs/session" target="_blank">session</a>: create sessions. e.g. <code>app.use(session({secret: 'b@ndw1d7h'}))</code></p></li>
<li><p><a href="https://github.com/expressjs/method-override" target="_blank">method-override</a>: <code>app.use(methodOverride('_method'))</code> Override methods to the one specified on the <code>_method</code> param. e.g. <code>GET /resource/1?_method=DELETE</code> will become <code>DELETE /resource/1</code>.</p></li>
<li><p><a href="https://github.com/expressjs/response-time" target="_blank">response-time</a>: <code>app.use(responseTime())</code> adds <code>X-Response-Time</code> header to responses.</p></li>
<li><p><a href="https://github.com/expressjs/errorhandler" target="_blank">errorhandler</a>: Aid development, by sending full error stack traces to the client when an error occurs. <code>app.use(errorhandler())</code>. It is good practice to surround it with an if statement to check <code>process.env.NODE_ENV === 'development'</code>.</p></li>
<li><p><a href="https://github.com/expressjs/vhost" target="_blank">vhost</a>: Allows you to use different stack of middlewares depending on the request <code>hostname</code>. e.g. <code>app.use(vhost('*.user.local', userapp))</code> and <code>app.use(vhost('assets-*.example.com', staticapp))</code> where <code>userapp</code> and <code>staticapp</code> are different express instances with different middlewares.</p></li>
<li><p><a href="https://github.com/expressjs/csurf" target="_blank">csurf</a>: Adds a <strong>C</strong>ross-<strong>s</strong>ite <strong>r</strong>equest <strong>f</strong>orgery (CSRF) protection by adding a token to responds either via <code>session</code> or <code>cookie-parser</code> middleware. <code>app.use(csrf());</code></p></li>
<li><p><a href="https://github.com/expressjs/timeout" target="_blank">timeout</a>: halt execution if it takes more that a given time. e.g. <code>app.use(timeout('5s'));</code>. However you need to check by yourself under every request with a middleware that checks <code>if (!req.timedout) next();</code>.</p></li>
</ul>


<h2>API clients (Browser, Postman and curl)</h2>

<p>I know you have not created any route yet. However, in the next sections you will. These are just three ways to retrieve, change and delete data from your future API.</p>

<h3>Curl</h3>

<pre><code class="bash Create tasks"># Create task
curl -XPOST http://localhost:3000/todos -d 'name=Master%20Routes&amp;completed=false&amp;note=soon...'

# List tasks
curl -XGET http://localhost:3000/todos
</code></pre>

<h3>Browser and Postman</h3>

<p>If you open your browser and type <code>localhost:3000/todos</code> you will see all the tasks (when you implement it). However, you cannot do post commands by default. For further testing let’s use a Chrome plugin called <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en" target="_blank">Postman</a>. It allows you to use all the HTTP VERBS easily and check <code>x-www-form-urlencoded</code> for adding parameters.</p>

<p><img src="/images/postman_post.png" title="Postman POST example" ></p>

<h3>Websites and Mobile Apps</h3>

<p>Probably this is the main consumers of the APIs. You can interact with RESTful APIs using jQuery&rsquo;s <code>$ajax</code> and its wrappers, BackboneJS&rsquo;s Collections/models, AngularJS&rsquo;s <code>$http</code> or <code>$resource</code>, among many other libraries/frameworks and mobile clients.</p>

<p>In the end, we are going to explain how to use AngularJS to interact with this API.</p>

<p><img src="/images/api_consumers.png" title="API Consumers" >
<small class="muted">Image from CodeSchool</small></p>

<h1>Wiring up the MEAN Stack</h1>

<h2>Bootstrapping ExpressJS</h2>

<p>After a detour in Node CLI, MongoDB, Mongoose, tools and middlewares land we are back to our express todoApp. This time to create the routes and finalize our RESTful API.</p>

<p>Create the app typing <code>express -e todoApp</code>, install dependencies <code>cd todoApp &amp;&amp; npm install</code> and run the app <code>DEBUG=todoApp ./bin/www</code>:</p>

<pre><code class="bash">express -e todoApp

# =&gt;   create : todoApp                  # app directory  
# =&gt;   create : todoApp/package.json     # file containing all the dependencies
# =&gt;   create : todoApp/app.js           # Entry point of the application: defines middleware, initialize database connections, routes and more.
# =&gt;   create : todoApp/public           # all files contained here are accessible through to public (browser or API calls).
# =&gt;   create : todoApp/public/javascripts
# =&gt;   create : todoApp/public/images
# =&gt;   create : todoApp/public/stylesheets
# =&gt;   create : todoApp/public/stylesheets/style.css
# =&gt;   create : todoApp/routes           # containes all the routes files
# =&gt;   create : todoApp/routes/index.js
# =&gt;   create : todoApp/routes/users.js
# =&gt;   create : todoApp/views            # contains all the HTML templates
# =&gt;   create : todoApp/views/index.ejs
# =&gt;   create : todoApp/views/error.ejs
# =&gt;   create : todoApp/bin              # contains executable files
# =&gt;   create : todoApp/bin/www          # bootstrap the app: loads app.js, and set the port for the webserver.
# =&gt;
# =&gt;   install dependencies:
# =&gt;     $ cd todoApp &amp;&amp; npm install
# =&gt;
# =&gt;   run the app:
# =&gt;     $ DEBUG=todoApp ./bin/www
</code></pre>

<h2>Connect ExpressJS to MongoDB</h2>

<p>Hopefully, you have installed MongoDB in the <a href="#mongodb">setup section</a>, and you can start it typing:</p>

<pre><code class="bash">mongod
</code></pre>

<p>Install the MongoDB driver for NodeJS called mongoose:</p>

<pre><code class="bash">npm install mongoose --save
</code></pre>

<p>Notice <code>--save</code>. It will add it to the <code>todoApp/package.json</code></p>

<p>Next, you need to require mongoose in the <code>todoApp/app.js</code></p>

<pre><code class="javascript">var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/todoApp', function(err) {
    if(err) {
        console.log('connection error', err);
    } else {
        console.log('connection successful');
    }
});
</code></pre>

<p>Now, When you run <code>npm start</code> or <code>./bin/www</code>, you will notice the message <code>connection successful</code>. Did you? Great!</p>

<h2>Creating the Todo model with Mongoose</h2>

<p>It is show time! All the above was setup and preparation for this moment. Let bring the API to life.</p>

<p>Create a <code>models</code> directory and a <code>Todo.js</code> model:</p>

<pre><code class="bash">mkdir models
touch models/Todo.js
</code></pre>

<p>In the <code>models/Todo.js</code>:</p>

<pre><code class="javascript">var mongoose = require('mongoose');

var TodoSchema = new mongoose.Schema({
  name: String,
  completed: Boolean,
  note: String,
  updated_at: { type: Date, default: Date.now },
});

mongoose.model('Todo', TodoSchema);
</code></pre>

<p>What’s going up there? Isn’t MongoDB suppose to be schemaless? Well, it is schemaless and very flexible indeed. However, very often we want bring sanity to our API/WebApp through validations and enforcing a schema to keep a consistent structure. Mongoose does that for us, which is nice.</p>

<p>You can use the following types:</p>

<ul>
<li>String</li>
<li>Boolean</li>
<li>Date</li>
<li>Array</li>
<li>Number</li>
<li>ObjectId</li>
<li>Mixed</li>
<li>Buffer</li>
</ul>


<h2>ExpressJS Routes</h2>

<p>To sum up we want to achieve the following:</p>

<table>
<thead>
<tr>
<th> Resource (URI)  </th>
<th>  POST (create) </th>
<th> GET (read)  </th>
<th> PUT (update)  </th>
<th> DELETE (destroy)  </th>
</tr>
</thead>
<tbody>
<tr>
<td> /todos  </td>
<td> create new task  </td>
<td> list tasks  </td>
<td> error  </td>
<td>  error </td>
</tr>
<tr>
<td> /todos/:id  </td>
<td>  error  </td>
<td> show task :id  </td>
<td> update task :id  </td>
<td>  destroy task ID 1 </td>
</tr>
</tbody>
</table>


<p>Let&rsquo;s setup the routes</p>

<p><code>bash Create a new route called `todos.js` in the `routes` folder or rename `users.js`
mv routes/users.js routes/todos.js
</code></p>

<p>In <code>app.js</code> add new <code>todos</code> route or just replace <code>./routes/users</code> for <code>./routes/todos</code></p>

<pre><code class="javascript Adding todos routes">var todos = require('./routes/todos');
app.use('/todos', todos);
</code></pre>

<p>All set! Now, let&rsquo;s go back and edit our <code>routes/todos.js</code>.</p>

<h3>List: GET /todos</h3>

<p>Remember <a href="#mongoose-read-and-query"> mongoose query api</a>? Here&rsquo;s how to use it in this context:</p>

<pre><code class="javascript routes/todos.js">var express = require('express');
var router = express.Router();

var mongoose = require('mongoose');
var Todo = require('../models/Todo.js');

/* GET /todos listing. */
router.get('/', function(req, res, next) {
  Todo.find(function (err, todos) {
    if (err) return next(err);
    res.json(todos);
  });
});

module.exports = router;
</code></pre>

<p>Harvest time! We don&rsquo;t have any task in database but at least we verify it is working:</p>

<pre><code class="bash Testing all together"># Start database
mongod

# Start Webserver (in other terminal tab)
DEBUG=todoApp ./bin/www

# Test API (in other terminal tab)
curl localhost:3000/todos
# =&gt; []% 
</code></pre>

<p>If it returns an empty array <code>[]</code> you are all set. If you get errors, try going back and making sure you didn&rsquo;t forget anything or write a comment at the end of the post for help.</p>

<h3>Create: POST /todos</h3>

<p>Back in <code>routes/todos.js</code>, we are going to add the ability to create using <a href="#mongoose-create">mongoose create</a>. Could you make it work before looking at the next example?</p>

<pre><code class="javascript routes/todos.js (showing just create route)">
/* POST /todos */
router.post('/', function(req, res, next) {
  Todo.create(req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Few things:</p>

<ul>
<li>We are using the <code>router.post</code> instead of <code>router.get</code>.</li>
<li>You have to stop and run the server again: <code>DEBUG=todoApp ./bin/www</code>. From now on, use <code>nodemon</code> to refresh automatically. <code>npm install nodemon</code> and then run <code>nodemon</code>.</li>
</ul>


<h3>Show: GET /todos/:id</h3>

<p>This is a snap with <a href="#mongoose-read-and-query"><code>Todo.findById</code></a> and <code>req.params</code>. Notice that <code>params</code> matches the placeholder name we set while defining the route. <code>:id</code> in this case.</p>

<pre><code class="javascript routes/todos.js (showing just show route)">/* GET /todos/id */
router.get('/:id', function(req, res, next) {
  Todo.findById(req.params.id, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Test it in <em>POST</em>MAN using an <code>_id</code> from you created elements. E.g. <code>localhost:3000/todos/542d7d290a705126360ac635</code>.</p>

<h3>Update: PUT /todos/:id</h3>

<p>Back in <code>routes/todos.js</code>, we are going to update tasks. This one you can do it before looking at the example bellow, review <a href="#mongoose-update">findByIdAndUpdate</a> and give it a try!</p>

<pre><code class="javascript routes/todos.js (showing just update route)">/* PUT /todos/:id */
router.put('/:id', function(req, res, next) {
  Todo.findByIdAndUpdate(req.params.id, req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Test it in <em>POST</em>MAN :)</p>

<h3>Destroy: DELETE /todos/:id</h3>

<p>Finally, the last one! Almost identical to <code>update</code>, use <a href="#mongoose-delete"><code>findByIdAndRemove</code></a>.</p>

<pre><code class="javascript routes/todos.js (showing just update route)">/* DELETE /todos/:id */
router.delete('/:id', function(req, res, next) {
  Todo.findByIdAndRemove(req.params.id, req.body, function (err, post) {
    if (err) return next(err);
    res.json(post);
  });
});
</code></pre>

<p>Is it working? Cool, you are done then!</p>

<h1>Hooking up NodeJS API with AngularJS</h1>

<p>As a prerrequisite you need to have finished our tutorial in the <a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/" target="_blank">previous post</a>.</p>

<p>The next post is going to cover this topic.</p>

<h1>What&rsquo;s next?</h1>

<p>Related tutorials:</p>

<ul>
<li>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></li>
<li>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></li>
<li>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a>*</li>
<li><a href="/blog/categories/backbonejs">BackboneJS Tutorials</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Tutorial for Beginners With NodeJS ExpressJS and MongoDB (Part I)]]></title>
    <link href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/"/>
    <updated>2014-09-28T23:50:24-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb</id>
    <content type="html"><![CDATA[<p>This tutorial is meant to be as clear as possible while at the same time teach you how to connect AngularJS with backend servers in Node.Js, Express.js and databases such as MongoDB, also known as the MEAN stack. Let’s start with angularJS!</p>

<p><strong>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></strong></p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" ></p>

<p>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></p>

<p><img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<p>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a></p>

<p><img src="/images/MEAN_jarroba.png" title="MEAN Stack" ></p>

<h1>Part I: AngularJS</h1>

<h2>What is Angular.js?</h2>

<p>Angular.js is a MVC open-source JavaScript web framework that facilitates the creation of single-page applications (SPA) and data-driven apps.</p>

<h1>Brief Background</h1>

<h2>AngularJS vs jQuery vs BackboneJS vs EmberJS</h2>

<p><a href="#start">TL; DR</a>: AngularJS is awesome for building testable single page applications (SPA), and also data driven and CRUD apps. <a href="#start">Show me the code!.</a></p>

<p>AngularJS motto is “HTML enhanced for web apps!”. It extends standard HTML tags and properties to bind events and data into it using JavaScript. It has a different approach to other libraries such as jQuery, Backbone.Js, Ember.js and similar… they are more leaned towards “Unobtrusive JavaScript”.</p>

<p>In the traditional unobtrusive JavaScript approach, instead of declaring the event handlers right in the element that they act upon, they are referenced using IDs and classes in the elements. That gives the advantage of separating structure (HTML) from behavior (Javascript). However, it does not do any better on code complexity and readability.</p>

<p>Times have changed since then. Let’s examine how AngularJS tries to alleviate code complexity and readability:</p>

<ul>
<li><p><strong>Unit testing</strong> ready: JavaScript is, usually, very hard to unit test when you have DOM manipulations and business logic together (e.g. jQuery based code). AngularJS keeps DOM manipulation in the HTML and business logic separated. Data and dependencies are <code>$inject</code>ed as needed.</p></li>
<li><p><strong>DOM manipulation</strong> where they are used. It decouples DOM manipulation from application logic.</p></li>
<li><p>AngularJS is also excellent for <strong>single-page applications (SPA)</strong>.</p></li>
<li><p>Different <strong>browsers implements</strong> features differently, but fret not. Angular’s directive (or HTML extensions) take care of the differences for you.</p></li>
<li><p><strong>Global namespace</strong> expressions and method definitions are scoped within controllers, so they do not pollute the global namespace.</p></li>
<li><p><strong>Data models</strong> are plain old JavaScript objects (POJO).</p></li>
<li><p>Write less code: AngualarJS features like directives, filters and automatic data bindings save code writing. (More on that later ;)</p></li>
<li><p>AngularJS provides solution for writing modular code and dependencies management.</p></li>
</ul>


<p>Despite all the goodness of AngularJS, it is not fit for every kind of project. Here are some guidelines I used&hellip;</p>

<ul>
<li>Need heavy DOM manipulations? Use jQuery or BackboneJS instead.</li>
<li>Data driven requirements (CRUD apps)? Use AngularJS.</li>
<li>Game programming? Use the canvas directly or game frameworks such as PhaserJS.</li>
<li>GUI editors? Use libraries with lower level of abstraction, such as jQuery.</li>
<li>Heavy RESTFul front-end app? Use Ember.js</li>
</ul>


<p>Without further ado, let’s dive in!</p>

<p><a id="start"></a></p>

<h1>AngularJS Tutorial by examples</h1>

<h2>AngularJS Directives</h2>

<p>The first concept you need to know about AngularJS is what are directives.</p>

<p><strong>Directives</strong>  are extensions of HTML markups in form of attributes, element names, CSS class and so forth. When the AngularJS framework is loaded everything inside <code>ng-app</code> it’s compiled by Angular and the directives are bound to data, events and DOM transformations.</p>

<p>Notice two directive on the following example <code>ng-app</code> and <code>ng-model</code>.</p>

<p>&#8220;`html Hello World in AngularJS <a href="http://codepen.io/amejiarosario/pen/KdLaq">http://codepen.io/amejiarosario/pen/KdLaq</a>
<html ng-app>
<head>
  <title>Hello World in AngularJS</title>
</head>
<body></p>

<p><input ng-model="name"> Hello {{ name }}</p>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js"></script>


<p></body>
</html>
&#8220;`</p>

<ul>
<li><p><strong>ng-app</strong>: is a directive that bootstraps AngularJS and designates the caller element as the root. It’s usually placed on <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p></li>
<li><p><strong>ng-model</strong>: is a directive that binds form elements such as <code>input</code>, <code>select</code>, <code>checkboxes</code>, <code>textarea</code> or customs ones to a property called <code>$scope</code>. More on <code>$scope</code> and <code>data binding</code> in the next sections, for now bear in mind that the textbox value  it’s bound to <code>{{ name }}</code></p></li>
<li><p><strong>{{ name }}</strong> <code>{{ }}</code> are a way of binding models to elements in HTML. In the example above the <code>ng-model</code> name is bound to the placeholder <code>{{ name }}</code>. Play with the example bellow to see how the placeholder is updated real-time to whatever you type in the textbox.</p></li>
</ul>


<p>Data binding AngularJS example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="KdLaq" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/KdLaq/'>KdLaq</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<h2>AngularJS Data Binding</h2>

<p><strong>Data binding</strong> is an AngularJS feature that automatically synchronizes your model data with your HTML. That’s great because models is the &ldquo;single source of truth&rdquo; and you do not have to worry about updating them. Here’s a graph from docs.angularjs.org.</p>

<p><img src="/images/Two_Way_Data_Binding.png" title="Two Data Binding in Angular Templates" ></p>

<p>Whenever the HTML is changed the model gets updated and wherever the model gets updated it is reflected in HTML.</p>

<h2>AngularJS Scope</h2>

<p><code>$scope</code> it is an object that contains all the data to which HTML is bound. They are the glue your javascript code (controllers) and the view (HTML). Everything that is attached to the <code>$scope</code>, it is automatically <code>$watch</code>ed by AngularJS and updated.</p>

<p>Scopes can be bound to javascript functions and also you could have more than one <code>$scope</code> and inherit from outer ones. More on this, in the controllers section.</p>

<h2>AngularJS Controllers</h2>

<p>Angular.js <strong>controllers</strong> are code that &ldquo;controls&rdquo; certain sections containing DOM elements in which they are declared. They encapsulate the behavior, callbacks and glue <code>$scope</code> models with views. Let&rsquo;s see an example to drive the concept home:</p>

<pre><code class="html AngularJS Controller Example http://codepen.io/amejiarosario/pen/spuCm">&lt;body ng-controller="TodoController"&gt;
  &lt;ul&gt;
    &lt;li ng-repeat="todo in todos"&gt;
      &lt;input type="checkbox" ng-model="todo.completed"&gt;
      {{ todo.name }}
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
    function TodoController($scope){
      $scope.todos = [
        { name: 'Master HTML/CSS/Javascript', completed: true },
        { name: 'Learn AngularJS', completed: false },
        { name: 'Build NodeJS backend', completed: false },
        { name: 'Get started with ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ]
    }
  &lt;/script&gt;  
&lt;/body&gt;
</code></pre>

<p>AngularJS controller interactive example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="spuCm" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/spuCm/'>spuCm</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>As you might notice we have new friends: <code>ng-controller</code>, <code>ng-repeat</code> and <code>$scope</code>.</p>

<ul>
<li><p><strong><code>ng-controller</code></strong> is a directive that tells angular what function controller to use for a particular view. Every time AngularJS loads, it reads the <code>ng-controller</code> argument (in this case &ldquo;TodoController&rdquo;). Then, it will look for a function in plain old javascript object (POJO) with the same name or for <code>angular.controller</code> matching name.</p></li>
<li><p><strong><code>$scope</code></strong> As mentioned earlier <code>$scope</code>&rsquo;s are the glue between the data models in the controllers and the views. Take a look to our &ldquo;TodoController&rdquo; it has a parameter named <code>$scope</code>. AngularJS is going to pass (<code>$inject</code>) that parameter, and whatever you attach to it, it will be available in the view. In this example is the particular is the <code>todos</code> array of objects.</p></li>
<li><p><strong><code>ng-repeat</code></strong> as its name implies, it is going to “repeat” the element and sub-elements where this directive is declared. It is going to iterate for each element in the <code>$scope.todos</code> array.</p></li>
<li><p><strong><code>ng-model</code></strong> notice that the checkbox is bound to the <code>todo.completed</code>. If <code>todo.completed</code> is true, then the checkbox is going to be checked automatically and vice versa.</p></li>
</ul>


<h2>AngularJS Modules</h2>

<p>Modules are a way to encapsulate different parts of your application (directives, controllers, factories, …) and reuse them in other places.  Here&rsquo;s an example of how to rewrite our controller using modules.</p>

<pre><code class="javascript AngularJS Module Example http://codepen.io/amejiarosario/pen/spuCm">angular.module('app', [])
  .controller('TodoController', ['$scope', function ($scope) {
    $scope.todos = [
      { title: 'Learn Javascript', completed: true },
      { title: 'Learn Angular.js', completed: false },
      { title: 'Love this tutorial', completed: true },
      { title: 'Learn Javascript design patterns', completed: false },
      { title: 'Build Node.js backend', completed: false },
    ];
  }]);
</code></pre>

<p>Notice the <code>&lt;html ng-app="app"&gt;</code> in the example bellow</p>

<p data-height="268" data-theme-id="0" data-slug-hash="uFfqG" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/uFfqG/'>uFfqG</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>Using modules brings many advantages such as modules can be loaded in any order, parallel dependency loading, tests can only load the required modules and keep it fast, clear view of the dependencies.</p>

<h2>AngularJS Templates</h2>

<p>Templates contain HTML and Angular elements (directives, markup, filters or form controls). They can be cached and referenced by an id.</p>

<p>Here&rsquo;s an example:</p>

<pre><code class="html AngularJS Template Example https://gist.github.com/amejiarosario/eebd176cb1796769ec2b download">  &lt;script type="text/ng-template" id="/todos.html"&gt;
    &lt;ul&gt;
      &lt;li ng-repeat="todo in todos"&gt;
        &lt;input type="checkbox" ng-model="todo.completed"&gt;
        
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/script&gt;
</code></pre>

<p>Does the code inside looks familiar? ;)</p>

<p>Notice they are inside the <code>script</code> and has a type of <code>text/ng-template</code>.</p>

<h2>AngularJS Routes (ngRoutes)</h2>

<p>ngRoutes module allows changing what we see in the app depending on the URL (route). It, usually, uses templates to inject the HTML into the app.</p>

<p>It does not come with AngularJS core module, so we have to list it as a dependency. We are going to get it from Google CDN:</p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js"&gt;&lt;/script&gt;</code></p>

<p><strong>NEW FEATURE</strong>: add notes to the todo tasks. Let&rsquo;s start with the routes!</p>

<pre><code class="javascript">angular.module('app', ['ngRoute'])
  .config(['$routeProvider', function ($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: '/todos.html',
        controller: 'TodoController'
      });
  }]);
</code></pre>

<p data-height="268" data-theme-id="0" data-slug-hash="CmnFH" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/CmnFH/'>CmnFH</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<ul>
<li><p>First notice that we removed <code>ng-controller="TodoController"</code> from the body tag. The controllers are now called based on the route.</p></li>
<li><p><code>ngView</code> is a directive used by <code>$routeProvider</code> to render HTML into it. Every time the URL changes, it will inject a new HTML template and controller into ngView.</p></li>
</ul>


<h2>AngularJS Services (factory)</h2>

<p>Notice that if you want to create a 2nd controller and share $scope.todos it is not possible right now. That is when services become handy. Services are a way to inject data dependencies into controllers. They are created through factories. Let&rsquo;s see it in action:</p>

<pre><code class="javascript AngularJS Service Factory Example">  angular.module('app', ['ngRoute'])

    .factory('Todos', function(){
      return [
        { name: 'AngularJS Directives', completed: true },
        { name: 'Data binding', completed: true },
        { name: '$scope', completed: true },
        { name: 'Controllers and Modules', completed: true },
        { name: 'Templates and routes', completed: true },
        { name: 'Filters and Services', completed: false },
        { name: 'Get started with Node/ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ];
    })

    .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
      $scope.todos = Todos;
    }])
</code></pre>

<p>We are now injecting the data dependency <code>Todo</code> into the controllers. This way we could reuse the data to any controller or module that we need to. This is not only used for static data like the array, but we could also do server calls using <code>$http</code> or even RESTful  <code>$resource</code>.</p>

<p>Let&rsquo;s say we want to show the details of the task when we click on it. For that, we need to create a 2nd controller, template and route that uses this service:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="pGkhg" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/pGkhg/'>pGkhg</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>(NOTE: Click on the links and it will take you to the todo details. Use backspace key to go back to the main menu)</p>

<p>This is what is happening:</p>

<ol>
<li>In the <code>HTML</code> tab we created a second template <code>/todoDetails.html</code> which contains the todo details we want to show.</li>
<li>Also, in our previous template <code>/todos.html</code> we want to have a link that points to the <code>todo</code> detail. We are using the <code>$index</code> which is the corresponding order number in a <code>ng-repeat</code>.</li>
<li>In the <code>JS</code> tab, we created a new <code>$routeProvider</code> which points to a new controller <code>TodoDetailCtrl</code> and the template that we created on #1. The <code>:id</code> parameter it is accessible in the controllers through <code>$routeParams</code>.</li>
<li>Created the new controller <code>TodoDetailCtrl</code> and inject the dependencies which are <code>$scope</code>, <code>Todos</code> (factory), and <code>$routeParams</code> which will have the <code>id</code> param.</li>
<li>Set the <code>$scope</code> in the new controller. Instead of using the whole array, we are going to select only the one that we need using the <code>id</code> that we set in step #2.</li>
</ol>


<p>NOTE: in codepen, you will not see the URL. If you want to see it changing, you can download the whole example an open it from <a href="https://gist.github.com/amejiarosario/f0a82c7a0eec4786f1c9" target="_blank">here</a>.</p>

<h2>AngularJS Filters</h2>

<p>Filters allow you to format and transform the output of expressions inside the curly braces. AngularJS comes with a bunch of useful filters.</p>

<p><strong>Built-in Filters</strong>:</p>

<ul>
<li><em>filter</em>: search for a given string in an array and return matches.</li>
<li><em>Number</em>: adds comma-separated 1000&rsquo;s and two decimal places.</li>
<li><em>Currency</em>: the same as <em>Number</em> and adds a $ in front.</li>
<li><em>Date</em>: takes a Unix timestamp (e.g. 1288323623006) or date string and output it in the format that you specify (e.g. &lsquo;longDate&rsquo; or fragments &lsquo;yyyy&rsquo; for four-digit year). For a full list see <a href="https://docs.angularjs.org/api/ng/filter/date" target="_blank">here</a>.</li>
<li><em>JSON</em>: converts javascript objects to JSON strings.</li>
<li><em>lowercase</em>/<em>uppercase</em>: converts strings to lowercase/uppercase.</li>
<li><em>limitTo</em>: number of elements from an array to show.</li>
<li><em>orderBy</em>: order array of objects by key that you specify.</li>
</ul>


<p><strong>Note</strong> you can also chain multiple filters and also define your own filters.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="tyuDK" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/tyuDK/'>tyuDK</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p><strong>NEW FEATURE</strong>: Search todo tasks by name. Let&rsquo;s use a filter to solve that problem.</p>

<pre><code class="html">  &lt;script type="text/ng-template" id="/todos.html"&gt;
    Search: &lt;input type="text" ng-model="search.name"&gt;
    &lt;ul&gt;
      &lt;li ng-repeat="todo in todos | filter: search"&gt;
        &lt;input type="checkbox" ng-model="todo.completed"&gt;
        &lt;a href="#/"&gt;&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/script&gt;
</code></pre>

<p>Notice that we are using <code>search.name</code> in the <code>ng-model</code> for search. That will limit the search to the <code>name</code> attribute and <code>search.notes</code> will look inside the notes only. Guest what <code>search</code> would do then? Precisely! It searches in all the attributes. Fork the following example and try it out:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="ahwbz" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/ahwbz/'>ahwbz</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>




<hr>


<h1>ng-test</h1>

<hr>


<p>Congrats, you have reached this far! It is time to test what you have learned. Test-Driven Learning (TDL). Open this <a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html" target="_blank">file</a> on your favorite code editor. Copy the boilerplate code and built the full app that we just build in the previous examples. Of course, you can take a peek from time to time if you get stuck ;)</p>

<p>Download this file as&hellip;:</p>

<p><a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html">index.html</a></p>

<p>-OR-</p>

<p>Fork and edit online:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="degzC" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/degzC/'>degzC</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>




<hr>


<h1>ng-solution</h1>

<hr>


<p>This is the full solution and you can see it <a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/b703b591bc84f2d59a2a483169294e2fb232419d/ngTodo.html#/" target="_blank">live in here</a>.</p>

<p><div><script src='https://gist.github.com/068143b53e54db43ef38.js'></script>
<noscript><pre><code>&lt;html ng-app=&quot;app&quot;&gt;
&lt;head&gt;
  &lt;title&gt;ngTodo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ng-view&gt;&lt;/ng-view&gt;

&lt;!-- Libraries --&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Template --&gt;
&lt;script type=&quot;text/ng-template&quot; id=&quot;/todos.html&quot;&gt;
  Search: &lt;input type=&quot;text&quot; ng-model=&quot;search.name&quot;&gt;
  &lt;ul&gt;
    &lt;li ng-repeat=&quot;todo in todos | filter: search&quot;&gt;
      &lt;input type=&quot;checkbox&quot; ng-model=&quot;todo.completed&quot;&gt;
      &lt;a href=&quot;#/{{$index}}&quot;&gt;{{todo.name}}&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/script&gt;

&lt;script type=&quot;text/ng-template&quot; id=&quot;/todoDetails.html&quot;&gt;
  &lt;h1&gt;{{ todo.name }}&lt;/h1&gt;
  completed: &lt;input type=&quot;checkbox&quot; ng-model=&quot;todo.completed&quot;&gt;
  note: &lt;textarea&gt;{{ todo.note }}&lt;/textarea&gt;
&lt;/script&gt;

&lt;script&gt;
  angular.module(&#39;app&#39;, [&#39;ngRoute&#39;])

    //---------------
    // Services
    //---------------

    .factory(&#39;Todos&#39;, function(){
      return [
        { name: &#39;AngularJS Directives&#39;, completed: true, note: &#39;add notes...&#39; },
        { name: &#39;Data binding&#39;, completed: true, note: &#39;add notes...&#39; },
        { name: &#39;$scope&#39;, completed: true, note: &#39;add notes...&#39; },
        { name: &#39;Controllers and Modules&#39;, completed: true, note: &#39;add notes...&#39; },
        { name: &#39;Templates and routes&#39;, completed: true, note: &#39;add notes...&#39; },
        { name: &#39;Filters and Services&#39;, completed: false, note: &#39;add notes...&#39; },
        { name: &#39;Get started with Node/ExpressJS&#39;, completed: false, note: &#39;add notes...&#39; },
        { name: &#39;Setup MongoDB database&#39;, completed: false, note: &#39;add notes...&#39; },
        { name: &#39;Be awesome!&#39;, completed: false, note: &#39;add notes...&#39; },
      ];
    })

    //---------------
    // Controllers
    //---------------

    .controller(&#39;TodoController&#39;, [&#39;$scope&#39;, &#39;Todos&#39;, function ($scope, Todos) {
      $scope.todos = Todos;
    }])

    .controller(&#39;TodoDetailCtrl&#39;, [&#39;$scope&#39;, &#39;$routeParams&#39;, &#39;Todos&#39;, function ($scope, $routeParams, Todos) {
      $scope.todo = Todos[$routeParams.id];
    }])

    //---------------
    // Routes
    //---------------

    .config([&#39;$routeProvider&#39;, function ($routeProvider) {
      $routeProvider
        .when(&#39;/&#39;, {
          templateUrl: &#39;/todos.html&#39;,
          controller: &#39;TodoController&#39;
        })

        .when(&#39;/:id&#39;, {
          templateUrl: &#39;/todoDetails.html&#39;,
          controller: &#39;TodoDetailCtrl&#39;
       });
    }]);
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>
</p>

<hr>


<h1>What&rsquo;s next?</h1>

<hr>


<p>We are going to build upon the things learned in here, in the next post we are going to setup a backend in NodeJS and MongoDB and connect it to AngularJS to provide a full featured CRUD app. Stay tuned for the next posts:</p>

<h1>What&rsquo;s next?</h1>

<p>Related tutorials:</p>

<ul>
<li>Part I - <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS</a></li>
<li>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></li>
<li>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a></li>
</ul>


<p>I also have created BackboneJS tutorials check it out:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/categories/backbonejs" target="_blank">BackboneJS Tutorials</a></li>
</ul>


<script async src="//codepen.io/assets/embed/ei.js"></script>



]]></content>
  </entry>
  
</feed>
