<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Adrian Mejia's Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2014-10-01T01:27:10-04:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Tutorial for Begineers With NodeJS ExpressJS and MongoDB]]></title>
    <link href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-begineers-with-nodejs-expressjs-and-mongodb/"/>
    <updated>2014-09-28T23:50:24-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-begineers-with-nodejs-expressjs-and-mongodb</id>
    <content type="html"><![CDATA[<p>This tutorial is meant to be as simple as possible and at the same time teach you how to connect AngularJS with backend servers in Node.js, Express.js and databases such as MongoDB, also known as the MEAN stack. Let&rsquo;s start with angularJS</p>

<p><img src="/images/angularjs.png" width="200" height="200" title="AngularJS" >
<img src="/images/nodejs.png" width="200" height="200" title="NodeJS" >
<img src="/images/mongodb.png" width="200" height="200" title="MongoDB" ></p>

<!-- http://simply-tutorial.com/blog/2014/07/07/octopress-toc-generator/ -->


<!-- https://github.com/syui/jekyll-toc-generator -->


<h2>What is Angular.js?</h2>

<p>Angular.js is a MVC open-source JavaScript web framework that facilitates the creation of single-page applications (SPA) and data driven apps. It&rsquo;s not the single framework on its class, however it&rsquo;s one of the most used and growing.</p>

<h2>Brief Background (AngularJS vs jQuery vs BackboneJS vs EmberJS)</h2>

<p><a href="#start">TL; DR</a>: AngularJS is awesome for building testable single page applications (SPA), and also data driven and CRUD apps. <a href="#start">Show me the code!.</a></p>

<p>AngularJS motto is &ldquo;HTML enhanced for web apps!&rdquo;. That&rsquo;s exactly what it does. It extends default HTML tags and properties to bind events and data into it using JavaScript. It&rsquo;s a very different approach to other libraries such as jQuery, Backbone.js, Ember.js and similar&hellip; which follows the &ldquo;Unobtrusive JavaScript&rdquo; approach.</p>

<p>In the traditional unobtrusive JavaScript approach, instead of declaring the event handlers right in the element that they act upon, they are referenced using IDs and classes in the elements. That gives the advantage of separating structure (HTML) from behaviour (Javascript). However, it doesn&rsquo;t do any better on code complexity and readability.</p>

<p>Times have changed since then. Let&rsquo;s examine closely how AngularJS tries to alleviate code complexity and readability.</p>

<ul>
<li>Unit testing ready: JavaScript is usually very hard to unit test when you have DOM manipulations and business logic together (e.g. jQuery based code). AngularJS keeps DOM manipulation in the HTML and business logic separated. Data and dependencies are injected as needed.</li>
<li>DOM manipulation where they are used. It decouples DOM manipulation from application logic.</li>
<li>AngularJS is also great for single page applications (SPA).</li>
<li>Different browsers implements features in a different way, but fret not. Angular’s directive (or HTML extensions) take care of the differences for you.</li>
<li>Global namespace: expressions and method definitions are scoped by controllers, so they don’t pollute the global namespace.</li>
<li>Data models are plain old JavaScript objects (POJO).</li>
<li>Write less code: AngualarJS features like directives, filters and automatic data bindings save a lot of code. (More on that later ;)</li>
<li>Modularization and dependencies handlers are provided by AngularJS.</li>
</ul>


<p>Despite all the goodness of AngularJS, it is not fit for every kind of project. Here&rsquo;s some guidelines I used&hellip;</p>

<ul>
<li>Need heavy DOM manipulations? Use jQuery or BackboneJS instead.</li>
<li>Data driven requirements (CRUD apps)? Use AngularJS.</li>
<li>Game programing? Use the canvas directly or game frameworks such as PhaserJS.</li>
<li>GUI editors? use libraries with lower level abstractions such as jQuery.</li>
<li>Heavy RESTFul front-end app? Use Ember.js</li>
</ul>


<p>Without further ado, let’s dive in!!</p>

<p><a id="start"></a></p>

<h2>AngularJS Directives</h2>

<p>The first concept you need to know about AngularJS is what are directives.</p>

<p><strong>Directives</strong> are extensions of HTML markups in form of attributes, element names, CSS class and so on. When the AngularJS framework is loaded everything inside <code>ng-app</code> it&rsquo;s compiled by Angular and the directives are bound to data, events and/or DOM transformations.</p>

<p>Notice two directive on the following example <code>ng-app</code> and <code>ng-model</code>.</p>

<p>&#8220;`html Hello World in AngularJS <a href="http://codepen.io/amejiarosario/pen/KdLaq">http://codepen.io/amejiarosario/pen/KdLaq</a>
<html ng-app>
<head>
  <title>Hello World in AngularJS</title>
</head>
<body></p>

<p><input ng-model="name"> Hello {{ name }}</p>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js"></script>


<p></body>
</html>
&#8220;`</p>

<ul>
<li><strong>ng-app</strong>: is a directive that bootstraps AngularJS and designates the element which have it as the root element. It&rsquo;s usually placed on <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</li>
<li><strong>ng-model</strong>: is a directive that binds form elements such as <code>input</code>, <code>select</code>, <code>checkboxes</code>, <code>textarea</code> or custom ones to a property called <code>$scope</code>. More on <code>$scope</code> and <code>data binding</code> in the next sections, for now bare in mind that the textbox value in the input it&rsquo;s bound to <code>{{ name }}</code></li>
<li><strong>{{ name }}</strong> <code>{{ }}</code> are way of binding <code>models</code> to elements in HTML. In the example above the model <code>name</code> is bound to the placeholder <code>{{ name }}</code>. Play with the example bellow to see how the placeholder is updated real-time to whatever you type in the textbox.</li>
</ul>


<p>Data binging AngularJS example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="KdLaq" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/KdLaq/'>KdLaq</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<h2>AngularJS Data Binding</h2>

<p><strong>Data binding</strong> is an AngularJS feature that automatically synchronizes your model data with your HTML. That&rsquo;s great because models is the <code>single-source-of-truth</code> and you don&rsquo;t have to worry about updating them. Here&rsquo;s a graph from docs.angularjs.org.</p>

<p><img src="/images/Two_Way_Data_Binding.png" title="Two Data Binding in Angular Templates" ></p>

<p>Whenever the HTML is changed the model gets updated and wherever the model gets updated it is reflected in HTML.</p>

<h2>AngularJS Scope</h2>

<p><code>$scope</code> it is an object that contains all the data to which HTML is bound. They are the glue your javascript code (controllers) and the view (HTML). Everything that is bound to the <code>$scope</code>, it is automatically <code>$watch</code>ed by AngularJS and updated.</p>

<p>Scopes can be bound to javascript functions and also you could have more than one <code>$scope</code> and inherit from outer ones. More on this in the controllers section.</p>

<h2>AngularJS Controllers</h2>

<p>Angular.js <strong>controllers</strong> are code that &ldquo;controls&rdquo; certain sections containing DOM elements in which they are declared. They encapsulate the behavior, callbacks and glue <code>$scope</code> models with views. Let&rsquo;s see an example to drive the concept home:</p>

<pre><code class="html AngularJS Controller Example http://codepen.io/amejiarosario/pen/spuCm">&lt;body ng-controller="TodoController"&gt;
  &lt;ul&gt;
    &lt;li ng-repeat="todo in todos"&gt;
      &lt;input type="checkbox" ng-model="todo.completed"&gt;
      {{ todo.name }}
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
    function TodoController($scope){
      $scope.todos = [
        { name: 'Master HTML/CSS/Javascript', completed: true },
        { name: 'Learn AngularJS', completed: false },
        { name: 'Build NodeJS backend', completed: false },
        { name: 'Get started with ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ]
    }
  &lt;/script&gt;  
&lt;/body&gt;
</code></pre>

<p>AngularJS controller interactive example:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="spuCm" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/spuCm/'>spuCm</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>As you might notice we have new friends: <code>ng-controller</code>, <code>ng-repeat</code> and <code>$scope</code>.</p>

<ul>
<li><p><strong><code>ng-controller</code></strong> is a directive which tells angular what function controller to use for a particular view. Everytime AngularJS loads it reads the <code>ng-controller</code> argument (in this case &ldquo;TodoController&rdquo;). Then, it will look for a function in plain old javascript object (POJO) with the same name or for <code>angular.controller</code> matching name.</p></li>
<li><p><strong><code>$scope</code></strong> As mentioned earlier <code>$scope</code>&rsquo;s are the glue between the data models in the controllers and the views. Take a look to our &ldquo;TodoController&rdquo; it has a parameter named <code>$scope</code>. AngularJS is going to pass (<code>$inject</code>) that parameter and whatever you attach to it, it will be available in the view. In this example is the particular is the <code>todos</code> array of objects.</p></li>
<li><p><strong><code>ng-repeat</code></strong> as its name implies, it is going to &ldquo;repeat&rdquo; the element and sub-elements where this directive is declared. The number of times it&rsquo;s going to repeat the elements it&rsquo;s going to match the length of array in <code>$scope.todos</code>.</p></li>
<li><p><strong><code>ng-model</code></strong> take a special attention to the checkbox with is bound to the <code>todo.completed</code>. If completed it&rsquo;s true it&rsquo;s going to be checked automatically and viceversa.</p></li>
</ul>


<h2>AngularJS Modules</h2>

<p>Modules is a way to encapsulate different parts of your application (directives, controllers, factories, &hellip;) and reuse them easily. Here&rsquo;s an example of how to rewrite our controller using modules.</p>

<pre><code class="javascript AngularJS Module Example http://codepen.io/amejiarosario/pen/spuCm">angular.module('app', [])
  .controller('TodoController', ['$scope', function ($scope) {
    $scope.todos = [
      { title: 'Learn Javascript', completed: true },
      { title: 'Learn Angular.js', completed: false },
      { title: 'Love this tutorial', completed: true },
      { title: 'Learn Javascript design patterns', completed: false },
      { title: 'Build Node.js backend', completed: false },
    ];
  }]);
</code></pre>

<p>Notice the <code>&lt;html ng-app="app"&gt;</code> in the example bellow</p>

<p data-height="268" data-theme-id="0" data-slug-hash="uFfqG" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/uFfqG/'>uFfqG</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>Using modules brings many advantages such as modules can be loaded in any order, parallel dependency loading, tests can only load the required modules and keep it fast, clear view of the dependencies.</p>

<h2>AngularJS Templates</h2>

<p>Templates contains HTML and Angular elements (directives, markup , filters or form controls). They can be cached and referece by an id.</p>

<p>Here&rsquo;s an example:</p>

<pre><code class="html AngularJS Template Example https://gist.github.com/amejiarosario/eebd176cb1796769ec2b download">  &lt;script type="text/ng-template" id="/todos.html"&gt;
    &lt;ul&gt;
      &lt;li ng-repeat="todo in todos"&gt;
        &lt;input type="checkbox" ng-model="todo.completed"&gt;
        
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/script&gt;
</code></pre>

<p>Does the code inside looks familiar? ;)</p>

<p>Notice they are inside a <code>script</code> and has a type <code>text/ng-template</code>.</p>

<h2>AngularJS Routes (ngRoutes)</h2>

<p>ngRoutes module allows to change what we see in the app depending on the URL (route). It usally uses templates to inject the HTML into the app.</p>

<p>It doesn&rsquo;t come with AngularJS core so we have to add it as a dependency. So, we are going to get it from Google CDN:</p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js"&gt;&lt;/script&gt;</code></p>

<p>Let&rsquo;s say that in our todo app we want to add notes to each one. So let&rsquo;s do that using routes!</p>

<pre><code class="javascript">angular.module('app', ['ngRoute'])
  .config(['$routeProvider', function ($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: '/todos.html',
        controller: 'TodoController'
      });
  }]);
</code></pre>

<p data-height="268" data-theme-id="0" data-slug-hash="CmnFH" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/CmnFH/'>CmnFH</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<ul>
<li>First notice that we removed <code>ng-controller="TodoController"</code> from the body tag. The controller we be called based upon the route.</li>
<li><code>ngView</code> is a directive used by <code>$route</code> to render HTML into it. Everytime the route changes it also updates the <code>ngView</code>.</li>
</ul>


<h2>AngularJS Services (factory)</h2>

<p>Notice that if you want to create a 2nd controller and share $scope.todos it is not possible right now. That&rsquo;s when services becames handy. Services are way to inject data dependencies into controllers. They are created through factories. Let&rsquo;s see it in action:</p>

<pre><code class="javascript AngularJS Service Factory Example">  angular.module('app', ['ngRoute'])

    .factory('Todos', function(){
      return [
        { name: 'AngularJS Directives', completed: true },
        { name: 'Data binding', completed: true },
        { name: '$scope', completed: true },
        { name: 'Controllers and Modules', completed: true },
        { name: 'Templates and routes', completed: true },
        { name: 'Filters and Services', completed: false },
        { name: 'Get started with Node/ExpressJS', completed: false },
        { name: 'Setup MongoDB database', completed: false },
        { name: 'Be awesome!', completed: false },
      ];
    })

    .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
      $scope.todos = Todos;
    }])
</code></pre>

<p>We are now injecting the data dependency <code>Todo</code> into the controllers. This way we could reuse the data to any controller or module that we need to. This is not only used for static datas like the array, but we could also do server calls using <code>$http</code> or even RESTful  <code>$resource</code>.</p>

<p>Let&rsquo;s say we want to show the details of the task when we click on it. For that, we need to create a 2nd controller, template and route that uses this service:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="pGkhg" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/pGkhg/'>pGkhg</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>(NOTE: Click on the links and it will take you to the todo details. Use backspace key to go back to main menu)</p>

<p>This is what is happening:</p>

<ol>
<li>In the <code>HTML</code> tab we created a second template <code>/todoDetails.html</code> which contains the todo details we want to show.</li>
<li>Also, in our previous template <code>/todos.html</code> we want to have a link that points to the <code>todo</code> detail. We are using the <code>$index</code> which is the corresponding order number in a <code>ng-repeat</code>.</li>
<li>In the <code>JS</code> tab we created a new <code>$routeProvider</code> which points to a new controller <code>TodoDetailCtrl</code> and the templated that we created on #1. The <code>:id</code> parameter it&rsquo;s accessible in the controllers through <code>$routeParams</code>.</li>
<li>Created the new controller <code>TodoDetailCtrl</code> and inject the dependencies which are <code>$scope</code>, <code>Todos</code> (factory), and <code>$routeParams</code> which will have the <code>id</code> param.</li>
<li>Set the <code>$scope</code> in the new controller. Instead of using the whole array, we are going to select only the one that we need using the <code>id</code> that we set in step #2.</li>
</ol>


<p>NOTE: in codepen you won&rsquo;t see the URL, but you can download the whole example an open it from <a href="https://gist.github.com/amejiarosario/f0a82c7a0eec4786f1c9" target="_blank">here</a>.</p>

<h2>AngularJS Filters</h2>

<p>Filters allows you to format and transform the output of expressions inside the curly braces. AngularJS comes with a bunch of useful filters and you can also define your own.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="tyuDK" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/tyuDK/'>tyuDK</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<p>Note that you can also chain multiple filters.</p>

<h2>ng-knowledge</h2>

<p>Ok, fair enough? STOP. It&rsquo;s time to <code>test</code> what you learnt. Test Driven Learning (TDL). Open this <a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html" target="_blank">file</a> on your favarite code editor. Copy this code and do the full app that we just build in the examples. Of course, you can take a peek from time to time if you get stuck ;)</p>

<p>Download this file as&hellip;:</p>

<p><a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html">index.html</a></p>

<p>-OR-</p>

<p>Fork and edit online:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="degzC" data-default-tab="result" data-user="amejiarosario" class='codepen'>See the Pen <a href='http://codepen.io/amejiarosario/pen/degzC/'>degzC</a> by Adrian Mejia (<a href='http://codepen.io/amejiarosario'>@amejiarosario</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<h1>What&rsquo;s next?</h1>

<p>We are going to build upon the things learnt in here, in the next post we are going to setup a backend in NodeJS and MongoDB and connect it to AngularJS to provide a full featured CRUD app. Stay tune for the next two posts:</p>

<ul>
<li>Creating API with NodeJS, ExpressJS and MongoDB tutorial for beginners</li>
<li>Full CRUD AngularJS app with NodeJS and MongoDB</li>
</ul>


<p>I also have created BackboneJS tutorials check it out:</p>

<ul>
<li><a href="http://adrianmejia.com/blog/categories/backbonejs" target="_blank">BackboneJS Tutorials</a></li>
</ul>


<script async src="//codepen.io/assets/embed/ei.js"></script>



]]></content>
  </entry>
  
</feed>
