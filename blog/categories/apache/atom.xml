<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache | Adrian Mejia's Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2014-10-15T14:09:20-04:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MEAN Stack Tutorial MongoDB ExpressJS AngularJS NodeJS (Part III)]]></title>
    <link href="http://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/"/>
    <updated>2014-10-03T06:59:34-04:00</updated>
    <id>http://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs</id>
    <content type="html"><![CDATA[<p>This is the last part of <a href="/blog/categories/mean-stack/">three-series tutorial</a>. We are going to build a full-stack Todo App using the MEAN (MongoDB, ExpressJS, AngularJS and NodeJS).</p>

<!--More-->


<h1>Part III: MEAN Stack</h1>

<p><img src="/images/MEAN_jarroba.png" title="MEAN Stack" ></p>

<h2>Brief Background</h2>

<p><a href="#start">TL; DR</a>: NodeJS has been built from bottom up a non-blocking I/O paradigm, which gives you more efficiency per CPU core than using threads in other languages like <a href="http://strongloop.com/strongblog/node-js-is-faster-than-java/">Java</a>. <a href="#start">Get started here</a>.</p>

<p>LAMP (Linux-Apache-MySQL-PHP) has dominated web application stack for many years now. Well-known platforms such as Wikipedia, Wordpress, and even Facebook uses it or started with it. Enterprise, usually, used go down the Java path: Hibernate, Spring, Struts, JBoss. More agile frameworks also have been widely used such as Ruby on Rails and for Python Django and Pylon.</p>

<p><img src="/images/lamp_vs_mean.jpg">
<small>(Image from <a href="http://blog.backand.com/mean-vs-lamp/">backand.com</a>)</small></p>

<p>Why MEAN stack then?</p>

<p><strong>Ubiquitous</strong></p>

<p>Well, it turns out, that JavaScript it is everywhere: smartphones, computers, in the browser, in the server, robotics, Arduino, RaspberryPi and growing. Thus, it does not matter what technology of stack you use to build web applications you need to be familiar with Javascript. In that case then, it is a time saver to use wherever it fits, especially for building web applications. MEAN stack is embracing that, using Javascript to create end-to-end web applications.</p>

<p><strong>Non-blocking architecture</strong></p>

<p>JavaScript is a dynamic, object-oriented, and functional scripting language. One of the features that make it win over Java Applets in the browser scripting war decades ago, it was its lightness and non-blocking event loop.
Bocking means that when one line of code is executing the rest of it is locked waiting to finish. On the other hand, non-blocking gives to each line of code a shot and then through callbacks it can come back when an event happens.
Programming languages that are blocking (Java, Ruby, Python, PHP, &hellip;) overcomes concurrency using multiple threads of execution while JavaScript handles it using non-blocking event loop in a single thread.</p>

<p><img src="/images/threading_java.png" title="" >
<img src="/images/threading_node.png">
<small>Image from <a href="http://strongloop.com/strongblog/node-js-is-faster-than-java/">strongloop.com</a></small></p>

<p>Some companies like <a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/">Paypal</a> moved from Java backend to NodeJS and reported a increased performance, lower average response times, and development speed gains.  Similarly happens to <a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/">Groupon</a> that came from Java/Rails monoliths.</p>

<p><strong>Agile and vibrant community</strong></p>

<p>The community behind Javascript is quite vibrant and has permeated in almost all the fields of technology: data visualization, client-side frameworks, server-side frameworks, databases, robotics, building tools and many more.</p>

<p><a id="start"></a></p>

<h2>Setup</h2>

<h3>MEN for MongoDB, ExpressJS and NodeJS</h3>

<p>In the <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">previous post</a>, we have gone through the process of building a RESTful API and we are going to be building on top of that. <a href="https://github.com/amejiarosario/todoAPIjs">Repository here</a>.</p>

<pre><code class="bash Getting the back-end code build on Part II">git clone https://github.com/amejiarosario/todoAPIjs.git
</code></pre>

<h3>A for AngularJS</h3>

<p>Similarly, we have build a very lean todoApp in the <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">first part</a> of this tutorial. You can <a href="https://gist.githubusercontent.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">download the file</a> to follow along and see it in action <a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">here</a>. You might notice the angularJS app is very simple and even it is entirely in one file for simplicity sake. In further tutorials, we are going to make it more modular, split in files, add tests and stylesheets.</p>

<p>Let&rsquo;s go first to the ExpressJS app (todoAPIjs) and review the default routing system:</p>

<ol>
<li><code>app.js</code> loads the all the routes.</li>
<li>The root path (<code>/</code>) is mounted on the <code>routes/index.js</code></li>
<li><code>routes/index.js</code> sets the variable title and renders <code>index.ejs</code>.</li>
</ol>


<pre><code class="javascript Tracing ExpressJS index route">// app.js
var routes = require('./routes/index');
app.use('/', routes);

// ./routes/index.js
router.get('/', function(req, res) {
  res.render('index', { title: 'Express' });
});

// ./views/index.ejs
    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;
</code></pre>

<p>The best place to load our <code>./views/index.ejs</code>. So let&rsquo;s copy the body content from ngTodo.html content in there and change in <code>./routes/index.js</code> title to &ldquo;ngTodo App&rdquo;. Don&rsquo;t forget to add ng-app on the top. <code>&lt;html ng-app="app"&gt;</code>.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/ebf20f4093aa20c867777b4b3db825429b54a20d">diff</a></p>

<h2>Wiring it together</h2>

<h3>AngularJS CRUD</h3>

<h4>AngularJS Read with $http</h4>

<p>As you might notice, in the factory, we have a fixed array. We need to change it to communicate with the API that we just build.</p>

<p><code>$http</code> is Anguar core sevice that allow to make <code>XMLHttpRequest</code> or <code>jsonp</code> request. You can either pass an object with http verb and url or call call $http.verb (<code>$http.get</code>, <code>$http.post</code>).</p>

<p><code>$http</code> returns a promise which has a <code>success</code> and <code>error</code> function.</p>

<pre><code class="javascript AngularJS $HTTP Usage Example">$http({method: 'GET', url: '/todos'}).
  success(function(data, status, headers, config) {
    // this callback will be called asynchronously
    // when the response is available.
    console.log('todos: ', data );
  }).
  error(function(data, status, headers, config) {
    // called asynchronously if an error occurs
    // or server returns response with an error status.
    console.log('Oops and error', data);
  });
</code></pre>

<p>Let&rsquo;s try it out in our app. Go to <code>views/index.ejs</code> and do this changes:</p>

<pre><code class="javascript Using $http to retrieve data from database">        // Service
        .factory('Todos', ['$http', function($http){
          return $http.get('/todos');
        }])

        // Controller
        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          Todos.success(function(data){
            $scope.todos = data;
          }).error(function(data, status){
            console.log(data, status);
            $scope.todos = [];
          });
        }])
</code></pre>

<p>If you have data in MongoDB you see them listed in the main page. If you not you can follow the steps in <a href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/#browser-and-postman">here</a> to get some in.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/0221aebd62e88445629debe4f132684686cf48ec">diff</a></p>

<h4>AngularJS Read with $resource</h4>

<p>If you click in one of the Todo elements and get redirected to the detail page, you will not see anything yet. We need to update the <code>TodoDetailCtrl</code> first. Even though, we already have the GET verb working, we have a slightly different URL requirement for <code>/todos/:id</code>. There’s an Angular service that has a higher level of abstraction to deal with RESTful requests: <code>$resource</code>.</p>

<p>Initialize as:
<code>$resource(url, [paramDefaults], [actions], options);</code></p>

<p>It comes with the following actions already defined; it is missing one though… Can you tell?</p>

<pre><code class="javascript $resource actions">{ 'get':    {method:'GET'},  // get individual record
  'save':   {method:'POST'}, // create record
  'query':  {method:'GET', isArray:true}, // get list all records
  'remove': {method:'DELETE'}, // remove record
  'delete': {method:'DELETE'} }; // same, remove record
</code></pre>

<p>The instances are used in the following way (examples will come later):</p>

<ul>
<li>GET: <code>Resource.get([parameters], [success], [error])</code></li>
<li>Non-GET: <code>Resource.action([parameters], postData, [success], [error])</code></li>
<li>Non-GET: <code>resourceInstance.$action([parameters], [success], [error])</code></li>
</ul>


<p><code>$resource</code> is not part of the Angular core, so it requires to <code>ngResource</code> and the dependency. We can get it from the CDN:</p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-resource.min.js"&gt;&lt;/script&gt;</code></p>

<p>This is what need to set it up:</p>

<pre><code class="Javascript $resource.query()">  // add ngResource dependency
  angular.module('app', ['ngRoute', 'ngResource'])

        .factory('Todos', ['$resource', function($resource){
          return $resource('/todos/:id', null, {
            'update': { method:'PUT' }
          });
        }])

        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.todos = Todos.query();
        }])        
</code></pre>

<p>Notice that <code>$resource</code> does not return a promise like <code>$http</code> but an empty reference instead. Angular will render an empty <code>$scope.todos</code>, however, when <code>Todos.query()</code> comes with the data from the server it will re-render the UI automatically.</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2aff6fe004bf7f7b2cd1b91d53e6958c3b158a20">diff</a></p>

<h4>AngularJS Create</h4>

<p>We will need to create a new text box, a button to send a <code>POST</code> request to server and add it to the <code>$scope</code>.</p>

<pre><code class="html New textbox for adding Todos">New task &lt;input type="text" ng-model="newTodo"&gt;&lt;button ng-click="save()"&gt;Create&lt;/button&gt;
</code></pre>

<p>Notice that we are using a new directive <code>ng-click</code>, this one executes a function when it clicked. Angular makes sure that the behaviour is consistent across different browsers.</p>

<pre><code class="javascript Save function $resource.$save(...)">        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.todos = Todos.query();

          $scope.save = function(){
            if(!$scope.newTodo || $scope.newTodo.length &lt; 1) return;
            var todo = new Todos({ name: $scope.newTodo, completed: false });

            todo.$save(function(){
              $scope.todos.push(todo);
              $scope.newTodo = ''; // clear textbox
            });
          }
        }])
</code></pre>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/46dd14023e2d9eff72d1366dbba9c9c8c872e07b">diff</a></p>

<h4>Show Todo details</h4>

<p>Every time you click a todo link, it is showing an empty fields. Let&rsquo;s fix that. First we need set the real <code>_id</code> to the links instead of <code>$index</code>.</p>

<pre><code class="html Change the ID link in the "/todos.html" template">        &lt;li ng-repeat="todo in todos | filter: search"&gt;
          &lt;input type="checkbox" ng-model="todo.completed"&gt;
          &lt;a href="#/"&gt;&lt;/a&gt;
        &lt;/li&gt;
</code></pre>

<pre><code class="javascript Update TodoDetailCtrl with $resource.get">        .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', function ($scope, $routeParams, Todos) {
          $scope.todo = Todos.get({id: $routeParams.id });
        }])
</code></pre>

<p>Now you should be able to see the details :)</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2484107294163a25621fba3785601adb32229ae9">diff</a></p>

<h4>AngularJS Update (in-line editing)</h4>

<p>This is going to be a very cool feature. Meet these new directives:</p>

<ul>
<li><p><strong>ng-show</strong>: is directive that shows the element in which it is declared if attribute is true or hide it when the attribute become false.</p></li>
<li><p><strong>ng-change</strong>: directive for input elements that evaluates the expression after any change.</p></li>
</ul>


<pre><code class="html  Template todos.html">    &lt;!-- Template --&gt;
    &lt;script type="text/ng-template" id="/todos.html"&gt;
      Search: &lt;input type="text" ng-model="search.name"&gt;
      &lt;ul&gt;
        &lt;li ng-repeat="todo in todos | filter: search"&gt;
          &lt;input type="checkbox" ng-model="todo.completed" ng-change="update($index)"&gt;
          &lt;a ng-show="!editing[$index]" href="#/"&gt;&lt;/a&gt;
          &lt;button ng-show="!editing[$index]" ng-click="edit($index)"&gt;edit&lt;/button&gt;

          &lt;input ng-show="editing[$index]" type="text" ng-model="todo.name"&gt;
          &lt;button ng-show="editing[$index]" ng-click="update($index)"&gt;Update&lt;/button&gt;
          &lt;button ng-show="editing[$index]" ng-click="cancel($index)"&gt;Cancel&lt;/button&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      New task &lt;input type="text" ng-model="newTodo"&gt;&lt;button ng-click="save()"&gt;Create&lt;/button&gt;
    &lt;/script&gt;
</code></pre>

<p>We added a new variable <code>$scope.editing</code> which shows or hides the form to edit the values. Furthermore, notice ng-click functions: edit, update and cancel. Let&rsquo;s see what they do.</p>

<pre><code class="javascript Todo Controller">        .controller('TodoController', ['$scope', 'Todos', function ($scope, Todos) {
          $scope.editing = [];
          $scope.todos = Todos.query();

          $scope.save = function(){
            if(!$scope.newTodo || $scope.newTodo.length &lt; 1) return;
            var todo = new Todos({ name: $scope.newTodo, completed: false });

            todo.$save(function(){
              $scope.todos.push(todo);
              $scope.newTodo = ''; // clear textbox
            });
          }

          $scope.update = function(index){
            var todo = $scope.todos[index];
            Todos.update({id: todo._id}, todo);
            $scope.editing[index] = false;
          }

          $scope.edit = function(index){
            $scope.editing[index] = angular.copy($scope.todos[index]);
          }

          $scope.cancel = function(index){
            $scope.todos[index] = angular.copy($scope.editing[index]);
            $scope.editing[index] = false;
          }
        }])
</code></pre>

<p>While were are editing notice that we copy the original todo task into the editing variable. This server for two purposes: (1) it evaluates to <code>true</code> and show the forms with <code>ng-show</code> and (2) it holds a copy of the original value in case we press cancel.</p>

<p>Now, going to the Todo Details. We would like that to be updated as well and add notes.</p>

<pre><code class="html Todo Details">    &lt;script type="text/ng-template" id="/todoDetails.html"&gt;
      &lt;h1&gt;&lt;/h1&gt;
      completed: &lt;input type="checkbox" ng-model="todo.completed"&gt;&lt;br&gt;
      note: &lt;textarea ng-model="todo.note"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;

      &lt;button ng-click="update()"&gt;Update&lt;/button&gt;
      &lt;a href="http://adrianmejia.com/"&gt;Cancel&lt;/a&gt;
    &lt;/script&gt;
</code></pre>

<p>Similarly, we added an update method. However, this time we do not need to pass any index, since it is just one todo at a time. After it has been saved, it goes back to root path <code>/</code>.</p>

<pre><code>        .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', '$location', function ($scope, $routeParams, Todos, $location) {
          $scope.todo = Todos.get({id: $routeParams.id });

          $scope.update = function(){
            Todos.update({id: $scope.todo._id}, $scope.todo, function(){
              $location.url('/');
            });
          }
        }])
</code></pre>

<ul>
<li><code>$location.url([url])</code> is a getter/setter method that allows us to change url, thus routing/view.</li>
</ul>


<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b6394448e1e1e8384815877df764507d6562dc4d">diff</a></p>

<h4>AngularJS Delete</h4>

<p>These are the changes added to implement the remove functionality. Pretty straight forward. Notice when we remove elements from the todos array <code>$scope.todos.splice(index, 1)</code> they also disappear from the DOM. Very cool, huh?</p>

<pre><code class="diff Delete functionality (diff)">diff --git a/views/index.ejs b/views/index.ejs
index 9c3ef46..afb37e1 100644
--- a/views/index.ejs
+++ b/views/index.ejs
@@ -22,6 +22,7 @@
           &lt;input type="checkbox" ng-model="todo.completed" ng-change="update($index)"&gt;
           &lt;a ng-show="!editing[$index]" href="#/"&gt;&lt;/a&gt;
           &lt;button ng-show="!editing[$index]" ng-click="edit($index)"&gt;edit&lt;/button&gt;
+          &lt;button ng-show="!editing[$index]" ng-click="remove($index)"&gt;remove&lt;/button&gt;

           &lt;input ng-show="editing[$index]" type="text" ng-model="todo.name"&gt;
           &lt;button ng-show="editing[$index]" ng-click="update($index)"&gt;update&lt;/button&gt;
@@ -37,6 +38,7 @@
       note: &lt;textarea ng-model="todo.note"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;

       &lt;button ng-click="update()"&gt;update&lt;/button&gt;
+      &lt;button ng-click="remove()"&gt;remove&lt;/button&gt;
       &lt;a href="http://adrianmejia.com/"&gt;Cancel&lt;/a&gt;
     &lt;/script&gt;

@@ -85,6 +87,13 @@
             $scope.todos[index] = angular.copy($scope.editing[index]);
             $scope.editing[index] = false;
           }
+
+          $scope.remove = function(index){
+            var todo = $scope.todos[index];
+            Todos.remove({id: todo._id}, function(){
+              $scope.todos.splice(index, 1);
+            });
+          }
         }])

         .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', '$location', function ($scope, $routeParams, Todos, $location) {
@@ -95,6 +104,12 @@
               $location.url('/');
             });
           }
+
+          $scope.remove = function(){
+            Todos.remove({id: $scope.todo._id}, function(){
+              $location.url('/');
+            });
+          }
         }])

         //---------------
</code></pre>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b9ff3a863c78d72e71b5cc9eb573bb3cb9d87179">diff</a></p>

<p><strong>Congratulations! You are now a MEAN developer!</strong></p>

<h2>What&rsquo;s next?</h2>

<p>Learn how to use GruntJS to automate repetitive tasks in your MEAN Stack workflow.</p>

<p><a href="/blog/2014/10/07/grunt-js-tutorial-from-beginner-to-ninja/">GruntJS Tutorial</a></p>

<p>Also, you can learn more about full-stack framework solutions.</p>

<h2>Full-Stack Javascript Web Frameworks</h2>

<p>What we did in these three series tutorial could have been done with just few keystrokes in the comamnd line ;). However, it&rsquo;s good to know what&rsquo;s going on. But at this point you do. So, I will introduce you to some frameworks that can save you a lot of time.</p>

<h3>Using MEAN.io</h3>

<p><a href="http://mean.io">MeanIO</a> uses a customized CLI tool: ‘mean’. Its approach for modularity is leaned towards self-contained packages that have code for both client and server files. At moment of writing this, it has nine packages ranging from MEAN-Admin, Translation, file uploads, image crop and more.</p>

<h3>Using MEAN.js</h3>

<p><a href="http://meanjs.org/">MeanJS</a> it is a fork from the creator of MEAN.IO, it uses Yeoman generators to generate Angular’s CRUD modules, routes, controllers, views, services, and more. Also has generators for Express: models, controllers, routes and tests. It has excellent documentation.</p>

<h3>Others Frameworks to look at</h3>

<ul>
<li><a href="https://www.meteor.com/">Meteor</a> - Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you&rsquo;re an expert developer or just getting started.</li>
<li><a href="http://sailsjs.org/">Sails</a> - The web framework of your dreams.
for your next web application.</li>
<li><a href="https://developer.yahoo.com/cocktails/mojito/">Yahoo! Mojito</a> - A JavaScript MVC framework for mobile applications, one of the Yahoo! Cocktails.</li>
<li><a href="http://towerjs.org">Tower.js</a> - Small components for building apps, manipulating data, and automating a distributed infrastructure.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Started With the Web Crawler Apache Nutch 1.x]]></title>
    <link href="http://adrianmejia.com/blog/2012/02/04/get-started-with-the-web-crawler-apache-nutch-1-x/"/>
    <updated>2012-02-04T00:00:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/02/04/get-started-with-the-web-crawler-apache-nutch-1-x</id>
    <content type="html"><![CDATA[<p>Apache Nutch is an open source <strong>scalable</strong> Web crawler written in Java and based on Lucene/Solr for the indexing and search part.&nbsp;It has a highly modular architecture, allowing developers to create plug-ins for media-type parsing, data retrieval, querying and clustering. [<a href="http://en.wikipedia.org/wiki/Nutch">*</a>]</p>


<!--More-->


<div>
    <u><strong>Motivation</strong></u></div>


<div>
    By using Nutch, we can find web page hyperlinks in an automated manner, reduce lots of maintenance work, for example checking broken links, and create a copy of all the visited pages for searching over. That&rsquo;s where Apache Solr comes in. Solr is an open source full text search framework, with Solr we can search the visited pages from Nutch. Luckily, integration between Nutch and Solr is pretty straightforward.</div>


<div>
    &nbsp;</div>


<div>
    Whole-web crawling is designed to handle very large crawls which may take weeks to complete, running on multiple machines. This also permits more control over the crawl process, and incremental crawling. It is important to note that whole web crawling does not necessarily mean crawling the entire world wide web. We can limit a whole web crawl to just a list of the URLs we want to crawl. This is done by using a filter just like we the one we used when we did the crawl command. [<a href="http://wiki.apache.org/nutch/NutchTutorial">*</a>]</div>


<div>
    &nbsp;</div>


<div>
    Some of the advantages of Nutch, when compared to a simple Fetcher</div>


<ul>
    <li>
        highly scalable and relatively feature rich crawler</li>
    <li>
        features like politeness which obeys robots.txt rules</li>
    <li>
        robust and scalable - you can run Nutch on a cluster of 100 machines</li>
    <li>
        quality - you can bias the crawling to fetch &ldquo;important&rdquo; pages first</li>
</ul>


<p><u><strong>Basics about Nutch</strong></u></p>


<p>First you need to know that, Nutch data is composed of:</p>


<ul>
    <li>
        The crawl database, or <strong>crawldb</strong>. This contains information about every url known to Nutch, including whether it was fetched, and, if so, when.</li>
    <li>
        The link database, or <strong>linkdb</strong>. This contains the list of known links to each url, including both the source url and anchor text of the link.</li>
    <li>
        A set of <strong>segments</strong>. Each segment is a set of urls that are fetched as a unit. Segments are directories with the following subdirectories:</li>
</ul>


<ol>
    <li>
        <strong>crawl_generate</strong> names a set of urls to be fetche</li>
    <li>
        <strong>crawl_fetch</strong> contains the status of fetching each url</li>
    <li>
        <strong>content</strong> contains the raw content retrieved from each url</li>
    <li>
        <strong>parse_text</strong> contains the parsed text of each url</li>
    <li>
        <strong>parse_data</strong> contains outlinks and metadata parsed from each url</li>
    <li>
        <strong>crawl_parse</strong> contains the outlink urls, used to update the crawldb</li>
</ol>


<p><u><strong>Nutch and Hadoop</strong></u></p>


<p>As of the official Nutch 1.3 release the source code architecture has been greatly simplified to allow us to run Nutch in one of two modes; namely local and deploy. By default, Nutch no longer comes with a Hadoop distribution, however when run in local mode e.g. running Nutch in a single process on one machine, then we use Hadoop as a dependency. This may suit you fine if you have a small site to crawl and index, but most people choose Nutch because of its capability to run on in deploy mode, within a Hadoop cluster. This gives you the benefit of a distributed file system (HDFS) and MapReduce processing style. &nbsp;If you are interested in deployed mode <a href="http://wiki.apache.org/nutch/NutchHadoopTutorial">read here</a>.</p>


<p><u><strong>Getting hands dirt with Nutch</strong></u></p>


<p><strong>1 Setup Nutch from binary distribution</strong></p>


<ol>
    <li>
        Unzip your binary Nutch package to $HOME/nutch-1.3</li>
    <li>
        cd $HOME/nutch-1.3/runtime/local</li>
    <li>
        From now on, we are going to use ${NUTCH_RUNTIME_HOME} to refer to the current directory.</li>
</ol>


<div>
    &nbsp;</div>


<div>
    <strong>2. Verify your Nutch installation</strong></div>


<ol>
    <li>
        run &quot;bin/nutch&quot;</li>
    <li>
        You can confirm a correct installation if you seeing the following: &nbsp;Usage: nutch [-core] COMMAND</li>
</ol>


<div>
    <u>Some troubleshooting tips:</u></div>


<div>
    Run the following command if you are seeing &quot;Permission denied&quot;:</div>


<div>
    chmod +x bin/nutch</div>


<div>
    Setup JAVA_HOME if you are seeing JAVA_HOME not set. On Mac, you can run the following command or add it to ~/.bashrc:</div>


<div>
    export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home #mac</div>


<div>
    Ubuntu:</div>


<div>
    export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk&nbsp;</div>


<div>
    export NUTCH_HOME=/var/www/nutch-1.3/runtime/local</div>


<div>
    &nbsp;</div>


<div>
    <u>Example of using Nutch to crawl wikipedia pages:</u></div>


<div>
    Here we are try to crawl&nbsp;<span class="s2"><a href="http://en.wikipedia.org/wiki/Collective_intelligence">http://en.wikipedia.org/wiki/Collective_intelligence</a>&nbsp;and sublinks in the same domain.</span></div>


<ol class="ol1">
    <li class="li1">
        $ cd NUTCH_HOME/runtime/local</li>
    <li class="li2">
        <span class="s1">$ echo &quot;<a href="http://en.wikipedia.org/wiki/Collective_intelligence"><span class="s2">http://en.wikipedia.org/wiki/Collective_intelligence</span></a>&quot; &gt; urls</span></li>
    <li class="li1">
        add: `+^http://([a-z0-9]*&#46;)*wikipedia.org/` in&nbsp;conf/regex-urlfilter.txt</li>
    <li class="li1">
        $ bin/nutch crawl urls -dir crawl-wiki-ci -depth 2</li>
    <li class="li1">
        <b>statistics associated with the crawldb</b>
        <ol class="ol1">
            <li class="li1">
                $ nutch readdb crawl-wiki-ci/crawldb/ -stats
                <ol class="ol1">
                    <li class="li1">
                        CrawlDb statistics start: crawl-wiki-ci/crawldb/Statistics for CrawlDb: crawl-wiki-ci/crawldb/<br />
                        TOTAL urls:&nbsp;&nbsp;&nbsp;&nbsp; 2727<br />
                        retry 0:&nbsp;&nbsp;&nbsp;&nbsp; 2727<br />
                        min score:&nbsp;&nbsp;&nbsp;&nbsp; 0.0<br />
                        avg score:&nbsp;&nbsp;&nbsp;&nbsp; 8.107811E-4<br />
                        max score:&nbsp;&nbsp;&nbsp;&nbsp; 1.341<br />
                        status 1 (db_unfetched):&nbsp;&nbsp;&nbsp;&nbsp; 2665<br />
                        status 2 (db_fetched):&nbsp;&nbsp;&nbsp;&nbsp; 61<br />
                        status 3 (db_gone):&nbsp;&nbsp;&nbsp;&nbsp; 1<br />
                        CrawlDb statistics: done</li>
                </ol>
            </li>
        </ol>
    </li>
    <li class="li1">
        <b>Dump of the URLs from the crawldb</b>
        <ol class="ol1">
            <li class="li1">
                $ nutch readdb crawl-wiki-ci/crawldb/ -dump crawl-wiki-ci/stats
                <ol class="ol1">
                    <li class="li1">
                        <span class="s3"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/MIT_Center_for_Collective_Intelligence"><span class="s2">http://en.wikipedia.org/wiki/Special:RecentChangesLinked/MIT_Center_for_Collective_Intelligence</span></a></span>&nbsp;&nbsp;&nbsp;&nbsp; Version: 7Status: 1 (db_unfetched)<br />
                        Fetch time: Sat Feb 04 00:50:50 EST 2012<br />
                        Modified time: Wed Dec 31 19:00:00 EST 1969<br />
                        Retries since fetch: 0<br />
                        Retry interval: 2592000 seconds (30 days)<br />
                        Score: 1.9607843E-4<br />
                        Signature: null<br />
                        Metadata:<br />
                        &hellip;.&nbsp;</li>
                </ol>
            </li>
        </ol>
    </li>
    <li class="li1">
        <b>Top 10 highest rate links</b>
        <ol class="ol1">
            <li class="li1">
                $ nutch readdb crawl-wiki-ci/crawldb/ -topN 10 crawl-wiki-ci/stats/top10/
                <ol class="ol1">
                    <li class="li2">
                        <span class="s1">1.3416613&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Collective_intelligence"><span class="s2">http://en.wikipedia.org/wiki/Collective_intelligence</span></a>0.030499997&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Howard_Bloom"><span class="s2">http://en.wikipedia.org/wiki/Howard_Bloom</span></a><br />
                        0.02763889&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Groupthink"><span class="s2">http://en.wikipedia.org/wiki/Groupthink</span></a><br />
                        0.02591739&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Wikipedia"><span class="s2">http://en.wikipedia.org/wiki/Wikipedia</span></a><br />
                        0.024347823&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Pierre_L%C3%A9vy_(philosopher)"><span class="s2">http://en.wikipedia.org/wiki/Pierre_L%C3%A9vy_(philosopher)</span></a><br />
                        0.023733648&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><span class="s2">http://en.wikipedia.org/wiki/Wikipedia:Citation_needed</span></a><br />
                        0.017142152&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/w/opensearch_desc.php"><span class="s2">http://en.wikipedia.org/w/opensearch_desc.php</span></a><br />
                        0.016599996&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Artificial_intelligence"><span class="s2">http://en.wikipedia.org/wiki/Artificial_intelligence</span></a><br />
                        0.016499996&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Consensus_decision_making"><span class="s2">http://en.wikipedia.org/wiki/Consensus_decision_making</span></a><br />
                        0.015199998&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://en.wikipedia.org/wiki/Group_selection"><span class="s2">http://en.wikipedia.org/wiki/Group_selection</span></a></span></li>
                </ol>
            </li>
        </ol>
    </li>
    <li class="li1">
        <b>Dump of a Nutch segment</b>
        <ol class="ol1">
            <li class="li1">
                $ nutch readseg -dump crawl-wiki-ci/segments/20120204004509/ crawl-wiki-ci/stats/segments
                <ol class="ol1">
                    <li class="li1">
                        CrawlDatum::Version: 7<br />
                        Status: 1 (db_unfetched)<br />
                        Fetch time: Sat Feb 04 00:45:03 EST 2012<br />
                        Modified time: Wed Dec 31 19:00:00 EST 1969<br />
                        Retries since fetch: 0<br />
                        Retry interval: 2592000 seconds (30 days)<br />
                        Score: 1.0<br />
                        Signature: null<br />
                        Metadata: _ngt_: 1328334307529</li>
                    <li class="li1">
                        <br />
                        Content::<br />
                        Version: -1<br />
                        url: <a href="http://en.wikipedia.org/wiki/Collective_intelligence"><span class="s4">http://en.wikipedia.org/wiki/Collective_intelligence</span></a><br />
                        base: <a href="http://en.wikipedia.org/wiki/Collective_intelligence"><span class="s4">http://en.wikipedia.org/wiki/Collective_intelligence</span></a><br />
                        contentType: application/xhtml+xml<br />
                        metadata: Content-Language=en Age=52614 Content-Length=29341 Last-Modified=Sat, 28 Jan 2012 17:27:22 GMT _fst_=33 nutch.segment.name=20120204004509 Connection=close X-Cache-Lookup=MISS from <a href="http://sq72.wikimedia.org/"><span class="s4">sq72.wikimedia.org:80</span></a> Server=Apache X-Cache=MISS from <a href="http://sq72.wikimedia.org/"><span class="s4">sq72.wikimedia.org</span></a> X-Content-Type-Options=nosniff Cache-Control=private, s-maxage=0, max-age=0, must-revalidate Vary=Accept-Encoding,Cookie Date=Fri, 03 Feb 2012 15:08:18 GMT Content-Encoding=gzip nutch.crawl.score=1.0 Content-Type=text/html; charset=UTF-8<br />
                        Content:<br />
                        &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><span class="s4">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</span></a>&quot;&gt;<br />
                        &lt;html lang=&quot;en&quot; dir=&quot;ltr&quot; class=&quot;client-nojs&quot; xmlns=&quot;<a href="http://www.w3.org/1999/xhtml"><span class="s4">http://www.w3.org/1999/xhtml</span></a>&quot;&gt;<br />
                        &lt;head&gt;<br />
                        &lt;title&gt;Collective intelligence - Wikipedia, the free encyclopedia&lt;/title&gt;<br />
                        &lt;meta &hellip;.<b>&nbsp;</b></li>
                </ol>
            </li>
        </ol>
    </li>
</ol>


<p class="li1">&nbsp;</p>


<p class="li1"><b>References:</b></p>


<ul>
    <li class="li1">
        http://wiki.apache.org/nutch/NutchTutorial</li>
    <li class="li1">
        http://en.wikipedia.org/wiki/Nutch</li>
</ul>

]]></content>
  </entry>
  
</feed>
